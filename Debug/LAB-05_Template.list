
LAB-05_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003224  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08003424  08003424  00013424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035cc  080035cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035d4  080035d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035d4  080035d4  000135d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000070  0800364c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000384  0800364c  00020384  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5d3  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018ff  00000000  00000000  0002b671  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000039c8  00000000  00000000  0002cf70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000006a0  00000000  00000000  00030938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000648  00000000  00000000  00030fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002cfa9  00000000  00000000  00031620  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00007af6  00000000  00000000  0005e5c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    001163b1  00000000  00000000  000660bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0017c470  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001988  00000000  00000000  0017c4ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         0000006c  00000000  00000000  0017de74  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  0017dee0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800340c 	.word	0x0800340c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800340c 	.word	0x0800340c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:

//------------------------------------------------------------------------------------
// MAIN Routine
//------------------------------------------------------------------------------------
int main(void)
	{
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Sys_Init(); // This always goes at the top of main (defined in init.c)
 80005e2:	f000 f991 	bl	8000908 <Sys_Init>
    //initUart(&huart, 115200, USART1);
    HAL_UART_MspInit(&huart);
 80005e6:	4876      	ldr	r0, [pc, #472]	; (80007c0 <main+0x1e0>)
 80005e8:	f000 f9a4 	bl	8000934 <HAL_UART_MspInit>

    printf("\033[2J\033[;H"); // Erase screen & move cursor to home position
 80005ec:	4875      	ldr	r0, [pc, #468]	; (80007c4 <main+0x1e4>)
 80005ee:	f002 f8cb 	bl	8002788 <iprintf>
  //  fflush(stdout); // Need to flush stdout after usSing printf that doesn't end in \n
    printf("\033[33;44m");
 80005f2:	4875      	ldr	r0, [pc, #468]	; (80007c8 <main+0x1e8>)
 80005f4:	f002 f8c8 	bl	8002788 <iprintf>
    char choice = '*';
    int row =12;
//	char in[3];
//   int size = 3;

    printf("\033[2;25H");
 80005f8:	4874      	ldr	r0, [pc, #464]	; (80007cc <main+0x1ec>)
 80005fa:	f002 f8c5 	bl	8002788 <iprintf>
    fflush(stdout);
 80005fe:	4c74      	ldr	r4, [pc, #464]	; (80007d0 <main+0x1f0>)
 8000600:	6823      	ldr	r3, [r4, #0]
 8000602:	6898      	ldr	r0, [r3, #8]
 8000604:	f001 fee2 	bl	80023cc <fflush>
    printf("PRESS <ESC> OR <CTL>+[ TO QUIT\r\n");
 8000608:	4872      	ldr	r0, [pc, #456]	; (80007d4 <main+0x1f4>)
 800060a:	f002 f931 	bl	8002870 <puts>
    printf("\033[6;1H");
 800060e:	4872      	ldr	r0, [pc, #456]	; (80007d8 <main+0x1f8>)
 8000610:	f002 f8ba 	bl	8002788 <iprintf>
    fflush(stdout);
 8000614:	6823      	ldr	r3, [r4, #0]
 8000616:	6898      	ldr	r0, [r3, #8]
 8000618:	f001 fed8 	bl	80023cc <fflush>

     //__HAL_RCC_GPIOJ_CLK_ENABLE(); // Need to enable clock for peripheral bus on GPIO Port J

    volatile uint32_t * RCC_AHB1_CLOCK_ENABLE = (uint32_t*) 0x40023830U; // Enable clock for peripheral bus on GPIO Port J
    *RCC_AHB1_CLOCK_ENABLE |= 512U; // Bitmask for RCC AHB1 initialization: 0x00000200U or 512U in decimal
 800061c:	4a6f      	ldr	r2, [pc, #444]	; (80007dc <main+0x1fc>)
 800061e:	6813      	ldr	r3, [r2, #0]
 8000620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000624:	6013      	str	r3, [r2, #0]

    GPIOJ->MODER |= 1024U; //Bitmask for GPIO J Pin 5 initialization (set it to Output mode): 0x00000400U or 1024U in decimal
 8000626:	4b6e      	ldr	r3, [pc, #440]	; (80007e0 <main+0x200>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800062e:	601a      	str	r2, [r3, #0]
    GPIOJ->BSRR = (uint16_t)GPIO_PIN_5; // Turn on Green LED (LED2)
 8000630:	2120      	movs	r1, #32
 8000632:	6199      	str	r1, [r3, #24]
    GPIOJ->BSRR = (uint32_t)GPIO_PIN_5 << 16; // Turn off Green LED (LED2)
 8000634:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000638:	619a      	str	r2, [r3, #24]
    GPIOJ->ODR ^= (uint16_t)GPIO_PIN_5; // Toggle LED2
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	404a      	eors	r2, r1
 800063e:	615a      	str	r2, [r3, #20]
// It doesn't get lower level than this!
//    volatile uint32_t * GREENLEDMODER = (uint32_t*) 0x40022400U; // Init GPIO J Pin 5 (LED2 with no Alt. func.) to Output
//    *GREENLEDMODER |= 1024U; // Bitmask for GPIO J Pin 5 initialization: 0x00000400U or 1024U in decimal

    volatile uint32_t * GREENLEDBSRR = (uint32_t*) 0x40022418U; // Address of GPIO J Bit Set/Reset Register
    *GREENLEDBSRR = (uint16_t)0x0020U; // Turn on Green LED (LED2)
 8000640:	3318      	adds	r3, #24
 8000642:	6019      	str	r1, [r3, #0]

    HAL_Delay(1000); // Pause for a second
 8000644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000648:	f000 fb68 	bl	8000d1c <HAL_Delay>
    int row =12;
 800064c:	260c      	movs	r6, #12
    char choice = '*';
 800064e:	242a      	movs	r4, #42	; 0x2a
//    volatile uint32_t * GREENLEDODR = (uint32_t*) 0x40022414U; // Address of GPIO J Output Data Register
//    *GREENLEDODR ^= (uint16_t)0x0020U; // Toggle Green LED (LED2)

    while(1)
    {
    	printf("\033[6;1H"); //set cursor postion to line 6
 8000650:	4861      	ldr	r0, [pc, #388]	; (80007d8 <main+0x1f8>)
 8000652:	f002 f899 	bl	8002788 <iprintf>
    	fflush(stdout);
 8000656:	4d5e      	ldr	r5, [pc, #376]	; (80007d0 <main+0x1f0>)
 8000658:	682b      	ldr	r3, [r5, #0]
 800065a:	6898      	ldr	r0, [r3, #8]
 800065c:	f001 feb6 	bl	80023cc <fflush>
        printf("The keyboard character is ");
 8000660:	4860      	ldr	r0, [pc, #384]	; (80007e4 <main+0x204>)
 8000662:	f002 f891 	bl	8002788 <iprintf>
        fflush(stdout);
 8000666:	682b      	ldr	r3, [r5, #0]
 8000668:	6898      	ldr	r0, [r3, #8]
 800066a:	f001 feaf 	bl	80023cc <fflush>
        printf("\033[31;44m"); // changes to red text blue background
 800066e:	485e      	ldr	r0, [pc, #376]	; (80007e8 <main+0x208>)
 8000670:	f002 f88a 	bl	8002788 <iprintf>
        fflush(stdout);
 8000674:	682b      	ldr	r3, [r5, #0]
 8000676:	6898      	ldr	r0, [r3, #8]
 8000678:	f001 fea8 	bl	80023cc <fflush>
        printf("%c\r\n",choice);
 800067c:	4621      	mov	r1, r4
 800067e:	485b      	ldr	r0, [pc, #364]	; (80007ec <main+0x20c>)
 8000680:	f002 f882 	bl	8002788 <iprintf>
        printf("\033[33;44m"); // changes to yellow text blue background
 8000684:	4850      	ldr	r0, [pc, #320]	; (80007c8 <main+0x1e8>)
 8000686:	f002 f87f 	bl	8002788 <iprintf>
        fflush(stdout);
 800068a:	682b      	ldr	r3, [r5, #0]
 800068c:	6898      	ldr	r0, [r3, #8]
 800068e:	f001 fe9d 	bl	80023cc <fflush>
        // ** delete printf("( Welcome to Microprocessor Systems )\r\n\n\n");
        // ** delete printf("1=repeat, 2=clear, 0=quit.\r\n\n"); // Menu of choices
				// Don't forget to end printf with newline or run fflush(stdout) after it!

//        choice = uart_getchar(&USB_UART, 1);
				choice = getchar();
 8000692:	f001 ff93 	bl	80025bc <getchar>
 8000696:	b2c4      	uxtb	r4, r0
//				uart_putchar(&USB_UART, &choice);
//				puts("stuff\r\n");

        // select which option to run
//        HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_5, GPIO_PIN_SET);         // Turn green LED on (GPIO_PIN_SET == 1)
        *GREENLEDBSRR = (uint16_t)0x0020U; // Turn on Green LED (LED2)
 8000698:	4b55      	ldr	r3, [pc, #340]	; (80007f0 <main+0x210>)
 800069a:	2220      	movs	r2, #32
 800069c:	601a      	str	r2, [r3, #0]
        if (output == 27) {
 800069e:	2c1b      	cmp	r4, #27
 80006a0:	f000 808b 	beq.w	80007ba <main+0x1da>
            return 1;
        }

        if(output <= 31){
 80006a4:	2c1f      	cmp	r4, #31
 80006a6:	dcd3      	bgt.n	8000650 <main+0x70>
        	printf("\033[12;24r");//if it reaches line 24 its starts scrolling
 80006a8:	4852      	ldr	r0, [pc, #328]	; (80007f4 <main+0x214>)
 80006aa:	f002 f86d 	bl	8002788 <iprintf>
        	fflush(stdout);
 80006ae:	682b      	ldr	r3, [r5, #0]
 80006b0:	6898      	ldr	r0, [r3, #8]
 80006b2:	f001 fe8b 	bl	80023cc <fflush>
        	printf("\a\n");
 80006b6:	4850      	ldr	r0, [pc, #320]	; (80007f8 <main+0x218>)
 80006b8:	f002 f8da 	bl	8002870 <puts>
        	if (row == 12){
 80006bc:	2e0c      	cmp	r6, #12
 80006be:	d041      	beq.n	8000744 <main+0x164>
        		printf("\033[33;44m"); // changes to yellow text blue background
        		fflush(stdout);
        		row++;
        	}
        	else if(row!=12){
        		printf("\033[u"); //restore cursor
 80006c0:	484e      	ldr	r0, [pc, #312]	; (80007fc <main+0x21c>)
 80006c2:	f002 f861 	bl	8002788 <iprintf>
        		fflush(stdout);
 80006c6:	4d42      	ldr	r5, [pc, #264]	; (80007d0 <main+0x1f0>)
 80006c8:	682b      	ldr	r3, [r5, #0]
 80006ca:	6898      	ldr	r0, [r3, #8]
 80006cc:	f001 fe7e 	bl	80023cc <fflush>
        		printf("\033[B"); // move down cursor
 80006d0:	484b      	ldr	r0, [pc, #300]	; (8000800 <main+0x220>)
 80006d2:	f002 f859 	bl	8002788 <iprintf>
        		fflush(stdout);
 80006d6:	682b      	ldr	r3, [r5, #0]
 80006d8:	6898      	ldr	r0, [r3, #8]
 80006da:	f001 fe77 	bl	80023cc <fflush>
        		printf("\033[s"); //save cursor
 80006de:	4849      	ldr	r0, [pc, #292]	; (8000804 <main+0x224>)
 80006e0:	f002 f852 	bl	8002788 <iprintf>
        		fflush(stdout);
 80006e4:	682b      	ldr	r3, [r5, #0]
 80006e6:	6898      	ldr	r0, [r3, #8]
 80006e8:	f001 fe70 	bl	80023cc <fflush>
        		printf("\033[33;44;5m"); // changes to yellow text blue background and blink
 80006ec:	4846      	ldr	r0, [pc, #280]	; (8000808 <main+0x228>)
 80006ee:	f002 f84b 	bl	8002788 <iprintf>
				fflush(stdout);
 80006f2:	682b      	ldr	r3, [r5, #0]
 80006f4:	6898      	ldr	r0, [r3, #8]
 80006f6:	f001 fe69 	bl	80023cc <fflush>
				printf("\aThe keyboard character $0%x", choice);
 80006fa:	4621      	mov	r1, r4
 80006fc:	4843      	ldr	r0, [pc, #268]	; (800080c <main+0x22c>)
 80006fe:	f002 f843 	bl	8002788 <iprintf>
				fflush(stdout);
 8000702:	682b      	ldr	r3, [r5, #0]
 8000704:	6898      	ldr	r0, [r3, #8]
 8000706:	f001 fe61 	bl	80023cc <fflush>
				printf(" is ");
 800070a:	4841      	ldr	r0, [pc, #260]	; (8000810 <main+0x230>)
 800070c:	f002 f83c 	bl	8002788 <iprintf>
				fflush(stdout);
 8000710:	682b      	ldr	r3, [r5, #0]
 8000712:	6898      	ldr	r0, [r3, #8]
 8000714:	f001 fe5a 	bl	80023cc <fflush>
				printf("\033[4m 'not printable.'\r\n");
 8000718:	483e      	ldr	r0, [pc, #248]	; (8000814 <main+0x234>)
 800071a:	f002 f8a9 	bl	8002870 <puts>
				fflush(stdout);
 800071e:	682b      	ldr	r3, [r5, #0]
 8000720:	6898      	ldr	r0, [r3, #8]
 8000722:	f001 fe53 	bl	80023cc <fflush>
				printf("\033[0m");
 8000726:	483c      	ldr	r0, [pc, #240]	; (8000818 <main+0x238>)
 8000728:	f002 f82e 	bl	8002788 <iprintf>
				fflush(stdout);
 800072c:	682b      	ldr	r3, [r5, #0]
 800072e:	6898      	ldr	r0, [r3, #8]
 8000730:	f001 fe4c 	bl	80023cc <fflush>
				printf("\033[33;44m"); // changes to yellow text blue background
 8000734:	4824      	ldr	r0, [pc, #144]	; (80007c8 <main+0x1e8>)
 8000736:	f002 f827 	bl	8002788 <iprintf>
				fflush(stdout);
 800073a:	682b      	ldr	r3, [r5, #0]
 800073c:	6898      	ldr	r0, [r3, #8]
 800073e:	f001 fe45 	bl	80023cc <fflush>
 8000742:	e785      	b.n	8000650 <main+0x70>
        		printf("\033[12;1H"); //start at line 12
 8000744:	4835      	ldr	r0, [pc, #212]	; (800081c <main+0x23c>)
 8000746:	f002 f81f 	bl	8002788 <iprintf>
        		fflush(stdout);
 800074a:	682b      	ldr	r3, [r5, #0]
 800074c:	6898      	ldr	r0, [r3, #8]
 800074e:	f001 fe3d 	bl	80023cc <fflush>
        		printf("\033[33;44;5m"); // changes to yellow text blue background and blink
 8000752:	482d      	ldr	r0, [pc, #180]	; (8000808 <main+0x228>)
 8000754:	f002 f818 	bl	8002788 <iprintf>
        		fflush(stdout);
 8000758:	682b      	ldr	r3, [r5, #0]
 800075a:	6898      	ldr	r0, [r3, #8]
 800075c:	f001 fe36 	bl	80023cc <fflush>
        		printf("\033[s"); //save cursor
 8000760:	4828      	ldr	r0, [pc, #160]	; (8000804 <main+0x224>)
 8000762:	f002 f811 	bl	8002788 <iprintf>
        		fflush(stdout);
 8000766:	682b      	ldr	r3, [r5, #0]
 8000768:	6898      	ldr	r0, [r3, #8]
 800076a:	f001 fe2f 	bl	80023cc <fflush>
        		printf("\aThe keyboard character $0%x", choice);
 800076e:	4621      	mov	r1, r4
 8000770:	4826      	ldr	r0, [pc, #152]	; (800080c <main+0x22c>)
 8000772:	f002 f809 	bl	8002788 <iprintf>
        		fflush(stdout);
 8000776:	682b      	ldr	r3, [r5, #0]
 8000778:	6898      	ldr	r0, [r3, #8]
 800077a:	f001 fe27 	bl	80023cc <fflush>
        		printf(" is ");
 800077e:	4824      	ldr	r0, [pc, #144]	; (8000810 <main+0x230>)
 8000780:	f002 f802 	bl	8002788 <iprintf>
        		fflush(stdout);
 8000784:	682b      	ldr	r3, [r5, #0]
 8000786:	6898      	ldr	r0, [r3, #8]
 8000788:	f001 fe20 	bl	80023cc <fflush>
        		printf("\033[4m 'not printable.'\r\n");
 800078c:	4821      	ldr	r0, [pc, #132]	; (8000814 <main+0x234>)
 800078e:	f002 f86f 	bl	8002870 <puts>
        		fflush(stdout);
 8000792:	682b      	ldr	r3, [r5, #0]
 8000794:	6898      	ldr	r0, [r3, #8]
 8000796:	f001 fe19 	bl	80023cc <fflush>
        		printf("\033[0m");
 800079a:	481f      	ldr	r0, [pc, #124]	; (8000818 <main+0x238>)
 800079c:	f001 fff4 	bl	8002788 <iprintf>
        		fflush(stdout);
 80007a0:	682b      	ldr	r3, [r5, #0]
 80007a2:	6898      	ldr	r0, [r3, #8]
 80007a4:	f001 fe12 	bl	80023cc <fflush>
        		printf("\033[33;44m"); // changes to yellow text blue background
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <main+0x1e8>)
 80007aa:	f001 ffed 	bl	8002788 <iprintf>
        		fflush(stdout);
 80007ae:	682b      	ldr	r3, [r5, #0]
 80007b0:	6898      	ldr	r0, [r3, #8]
 80007b2:	f001 fe0b 	bl	80023cc <fflush>
        		row++;
 80007b6:	3601      	adds	r6, #1
 80007b8:	e74a      	b.n	8000650 <main+0x70>
//				printf("Enter an alphanumeric sequence (press <enter> if you want to send less than %d characters): \r\n", size + 1);
//				int a = uart_getline(&USB_UART, in, size);
//				printf("\r\nuart_getline result: %d\r\n", a);
//
		}
}
 80007ba:	2001      	movs	r0, #1
 80007bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000f8 	.word	0x200000f8
 80007c4:	08003444 	.word	0x08003444
 80007c8:	08003450 	.word	0x08003450
 80007cc:	0800345c 	.word	0x0800345c
 80007d0:	2000000c 	.word	0x2000000c
 80007d4:	08003464 	.word	0x08003464
 80007d8:	08003484 	.word	0x08003484
 80007dc:	40023830 	.word	0x40023830
 80007e0:	40022400 	.word	0x40022400
 80007e4:	0800348c 	.word	0x0800348c
 80007e8:	080034a8 	.word	0x080034a8
 80007ec:	080034b4 	.word	0x080034b4
 80007f0:	40022418 	.word	0x40022418
 80007f4:	080034bc 	.word	0x080034bc
 80007f8:	080034c8 	.word	0x080034c8
 80007fc:	0800352c 	.word	0x0800352c
 8000800:	08003530 	.word	0x08003530
 8000804:	080034e0 	.word	0x080034e0
 8000808:	080034d4 	.word	0x080034d4
 800080c:	080034e4 	.word	0x080034e4
 8000810:	08003504 	.word	0x08003504
 8000814:	0800350c 	.word	0x0800350c
 8000818:	08003524 	.word	0x08003524
 800081c:	080034cc 	.word	0x080034cc

08000820 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000820:	b500      	push	{lr}
 8000822:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000824:	2301      	movs	r3, #1
 8000826:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082c:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000836:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000838:	2219      	movs	r2, #25
 800083a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 800083c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000840:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000842:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000844:	2309      	movs	r3, #9
 8000846:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000848:	2307      	movs	r3, #7
 800084a:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800084c:	4668      	mov	r0, sp
 800084e:	f000 fe25 	bl	800149c <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 8000852:	b100      	cbz	r0, 8000856 <SystemClock_Config+0x36>
 8000854:	e7fe      	b.n	8000854 <SystemClock_Config+0x34>
    while(1) { ; }
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8000856:	f000 fde3 	bl	8001420 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 800085a:	b100      	cbz	r0, 800085e <SystemClock_Config+0x3e>
 800085c:	e7fe      	b.n	800085c <SystemClock_Config+0x3c>
    while(1) { ; }
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800085e:	230f      	movs	r3, #15
 8000860:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2302      	movs	r3, #2
 8000864:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800086a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800086e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000874:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000876:	2107      	movs	r1, #7
 8000878:	a80d      	add	r0, sp, #52	; 0x34
 800087a:	f001 f84d 	bl	8001918 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800087e:	b100      	cbz	r0, 8000882 <SystemClock_Config+0x62>
 8000880:	e7fe      	b.n	8000880 <SystemClock_Config+0x60>
    while(1) { ; }
  }
}
 8000882:	b013      	add	sp, #76	; 0x4c
 8000884:	f85d fb04 	ldr.w	pc, [sp], #4

08000888 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000888:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800088a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800088e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <CPU_CACHE_Enable+0x7c>)
 8000894:	2100      	movs	r1, #0
 8000896:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800089a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800089e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008a2:	695a      	ldr	r2, [r3, #20]
 80008a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008a8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008ae:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008b2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008ba:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008be:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80008c2:	e00f      	b.n	80008e4 <CPU_CACHE_Enable+0x5c>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008c4:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008ca:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80008ce:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80008d2:	490c      	ldr	r1, [pc, #48]	; (8000904 <CPU_CACHE_Enable+0x7c>)
 80008d4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80008d8:	1e53      	subs	r3, r2, #1
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d1f2      	bne.n	80008c4 <CPU_CACHE_Enable+0x3c>
    } while(sets-- != 0U);
 80008de:	1e43      	subs	r3, r0, #1
 80008e0:	b118      	cbz	r0, 80008ea <CPU_CACHE_Enable+0x62>
 80008e2:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008e4:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 80008e8:	e7ed      	b.n	80008c6 <CPU_CACHE_Enable+0x3e>
 80008ea:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008ee:	694b      	ldr	r3, [r1, #20]
 80008f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f4:	614b      	str	r3, [r1, #20]
 80008f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008fa:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80008fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 8000908:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 800090a:	f7ff ffbd 	bl	8000888 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800090e:	f000 f9dd 	bl	8000ccc <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000912:	f7ff ff85 	bl	8000820 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 8000916:	4a03      	ldr	r2, [pc, #12]	; (8000924 <Sys_Init+0x1c>)
 8000918:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <Sys_Init+0x20>)
 800091e:	f000 f901 	bl	8000b24 <initUart>
}
 8000922:	bd08      	pop	{r3, pc}
 8000924:	40011000 	.word	0x40011000
 8000928:	20000178 	.word	0x20000178

0800092c <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 800092c:	b508      	push	{r3, lr}
  HAL_IncTick();
 800092e:	f000 f9e3 	bl	8000cf8 <HAL_IncTick>
}
 8000932:	bd08      	pop	{r3, pc}

08000934 <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000938:	b08c      	sub	sp, #48	; 0x30
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 800093a:	6803      	ldr	r3, [r0, #0]
 800093c:	4a6a      	ldr	r2, [pc, #424]	; (8000ae8 <HAL_UART_MspInit+0x1b4>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d006      	beq.n	8000950 <HAL_UART_MspInit+0x1c>





	} else if (huart->Instance == USART6) {
 8000942:	4a6a      	ldr	r2, [pc, #424]	; (8000aec <HAL_UART_MspInit+0x1b8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	f000 80a5 	beq.w	8000a94 <HAL_UART_MspInit+0x160>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800094a:	b00c      	add	sp, #48	; 0x30
 800094c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		__GPIOA_CLK_ENABLE();
 8000950:	4c67      	ldr	r4, [pc, #412]	; (8000af0 <HAL_UART_MspInit+0x1bc>)
 8000952:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6323      	str	r3, [r4, #48]	; 0x30
 800095a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000968:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800096e:	f04f 0801 	mov.w	r8, #1
 8000972:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	930a      	str	r3, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800097a:	2307      	movs	r3, #7
 800097c:	930b      	str	r3, [sp, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800097e:	4d5d      	ldr	r5, [pc, #372]	; (8000af4 <HAL_UART_MspInit+0x1c0>)
 8000980:	a907      	add	r1, sp, #28
 8000982:	4628      	mov	r0, r5
 8000984:	f000 fc5c 	bl	8001240 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000988:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800098c:	9707      	str	r7, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 800098e:	a907      	add	r1, sp, #28
 8000990:	4628      	mov	r0, r5
 8000992:	f000 fc55 	bl	8001240 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000996:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	6463      	str	r3, [r4, #68]	; 0x44
 800099e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	9302      	str	r3, [sp, #8]
 80009a6:	9b02      	ldr	r3, [sp, #8]
		__HAL_RCC_DMA1_CLK_ENABLE();
 80009a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ae:	6323      	str	r3, [r4, #48]	; 0x30
 80009b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b6:	9303      	str	r3, [sp, #12]
 80009b8:	9b03      	ldr	r3, [sp, #12]
		__HAL_RCC_DMA2_CLK_ENABLE();
 80009ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c0:	6323      	str	r3, [r4, #48]	; 0x30
 80009c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c8:	9304      	str	r3, [sp, #16]
 80009ca:	9b04      	ldr	r3, [sp, #16]
		hdma_tx.Instance = DMA2_Stream7;
 80009cc:	4d4a      	ldr	r5, [pc, #296]	; (8000af8 <HAL_UART_MspInit+0x1c4>)
 80009ce:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <HAL_UART_MspInit+0x1c8>)
 80009d0:	602b      	str	r3, [r5, #0]
		hdma_tx.Init.Channel = DMA_CHANNEL_4;
 80009d2:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
 80009d6:	f8c5 a004 	str.w	sl, [r5, #4]
		hdma_tx.Init.Mode = DMA_NORMAL;
 80009da:	2400      	movs	r4, #0
 80009dc:	61ec      	str	r4, [r5, #28]
		hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009de:	f04f 0940 	mov.w	r9, #64	; 0x40
 80009e2:	f8c5 9008 	str.w	r9, [r5, #8]
		hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e6:	60ec      	str	r4, [r5, #12]
		hdma_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009e8:	612f      	str	r7, [r5, #16]
		hdma_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009ea:	622c      	str	r4, [r5, #32]
		hdma_tx.Init.PeriphDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ec:	616c      	str	r4, [r5, #20]
		hdma_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ee:	61ac      	str	r4, [r5, #24]
		hdma_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009f0:	626c      	str	r4, [r5, #36]	; 0x24
		HAL_DMA_Init(&hdma_tx);
 80009f2:	4628      	mov	r0, r5
 80009f4:	f000 fa88 	bl	8000f08 <HAL_DMA_Init>
		hdma_rx.Instance = DMA2_Stream5;
 80009f8:	4e41      	ldr	r6, [pc, #260]	; (8000b00 <HAL_UART_MspInit+0x1cc>)
 80009fa:	4b42      	ldr	r3, [pc, #264]	; (8000b04 <HAL_UART_MspInit+0x1d0>)
 80009fc:	6033      	str	r3, [r6, #0]
		hdma_rx.Init.Channel = DMA_CHANNEL_4;
 80009fe:	f8c6 a004 	str.w	sl, [r6, #4]
		hdma_rx.Init.Mode = DMA_NORMAL;
 8000a02:	61f4      	str	r4, [r6, #28]
		hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a04:	60b4      	str	r4, [r6, #8]
		hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a06:	60f4      	str	r4, [r6, #12]
		hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a08:	6137      	str	r7, [r6, #16]
		hdma_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a0a:	6234      	str	r4, [r6, #32]
		hdma_rx.Init.PeriphDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a0c:	6174      	str	r4, [r6, #20]
		hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a0e:	61b4      	str	r4, [r6, #24]
		hdma_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a10:	6274      	str	r4, [r6, #36]	; 0x24
		HAL_DMA_Init(&hdma_rx);
 8000a12:	4630      	mov	r0, r6
 8000a14:	f000 fa78 	bl	8000f08 <HAL_DMA_Init>
	    __HAL_LINKDMA(&USB_UART, hdmarx, hdma_rx);
 8000a18:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <HAL_UART_MspInit+0x1d4>)
 8000a1a:	66de      	str	r6, [r3, #108]	; 0x6c
 8000a1c:	63b3      	str	r3, [r6, #56]	; 0x38
	    __HAL_LINKDMA(&USB_UART, hdmatx, hdma_tx);
 8000a1e:	669d      	str	r5, [r3, #104]	; 0x68
 8000a20:	63ab      	str	r3, [r5, #56]	; 0x38
		spi_tx.Instance = DMA1_Stream4;
 8000a22:	4d3a      	ldr	r5, [pc, #232]	; (8000b0c <HAL_UART_MspInit+0x1d8>)
 8000a24:	4b3a      	ldr	r3, [pc, #232]	; (8000b10 <HAL_UART_MspInit+0x1dc>)
 8000a26:	602b      	str	r3, [r5, #0]
		spi_tx.Init.Channel = DMA_CHANNEL_0;
 8000a28:	606c      	str	r4, [r5, #4]
		spi_tx.Init.Mode = DMA_NORMAL;
 8000a2a:	61ec      	str	r4, [r5, #28]
		spi_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a2c:	f8c5 9008 	str.w	r9, [r5, #8]
		spi_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a30:	60ec      	str	r4, [r5, #12]
		spi_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a32:	612f      	str	r7, [r5, #16]
		spi_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a34:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8000a38:	f8c5 9020 	str.w	r9, [r5, #32]
		spi_tx.Init.PeriphDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a3c:	616c      	str	r4, [r5, #20]
		spi_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a3e:	61ac      	str	r4, [r5, #24]
		spi_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a40:	626c      	str	r4, [r5, #36]	; 0x24
		HAL_DMA_Init(&spi_tx);
 8000a42:	4628      	mov	r0, r5
 8000a44:	f000 fa60 	bl	8000f08 <HAL_DMA_Init>
		spi_rx.Instance = DMA1_Stream3;
 8000a48:	4e32      	ldr	r6, [pc, #200]	; (8000b14 <HAL_UART_MspInit+0x1e0>)
 8000a4a:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <HAL_UART_MspInit+0x1e4>)
 8000a4c:	6033      	str	r3, [r6, #0]
		spi_rx.Init.Channel = DMA_CHANNEL_0;
 8000a4e:	6074      	str	r4, [r6, #4]
		spi_rx.Init.Mode = DMA_NORMAL;
 8000a50:	61f4      	str	r4, [r6, #28]
		spi_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a52:	60b4      	str	r4, [r6, #8]
		spi_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a54:	60f4      	str	r4, [r6, #12]
		spi_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a56:	6137      	str	r7, [r6, #16]
		spi_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a58:	f8c6 9020 	str.w	r9, [r6, #32]
		spi_rx.Init.PeriphDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a5c:	6174      	str	r4, [r6, #20]
		spi_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a5e:	61b4      	str	r4, [r6, #24]
		spi_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a60:	6274      	str	r4, [r6, #36]	; 0x24
		HAL_DMA_Init(&spi_rx);
 8000a62:	4630      	mov	r0, r6
 8000a64:	f000 fa50 	bl	8000f08 <HAL_DMA_Init>
	    __HAL_LINKDMA(&hspi, hdmarx, spi_rx);
 8000a68:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <HAL_UART_MspInit+0x1e8>)
 8000a6a:	659e      	str	r6, [r3, #88]	; 0x58
 8000a6c:	63b3      	str	r3, [r6, #56]	; 0x38
	    __HAL_LINKDMA(&hspi, hdmatx, spi_tx);
 8000a6e:	655d      	str	r5, [r3, #84]	; 0x54
 8000a70:	63ab      	str	r3, [r5, #56]	; 0x38
	    HAL_NVIC_SetPriority(DMA1_Stream3_IRQn,0,0);
 8000a72:	4622      	mov	r2, r4
 8000a74:	4621      	mov	r1, r4
 8000a76:	200e      	movs	r0, #14
 8000a78:	f000 f976 	bl	8000d68 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a7c:	200e      	movs	r0, #14
 8000a7e:	f000 f9a5 	bl	8000dcc <HAL_NVIC_EnableIRQ>
	    HAL_NVIC_SetPriority(DMA1_Stream4_IRQn,1,1);
 8000a82:	4642      	mov	r2, r8
 8000a84:	4641      	mov	r1, r8
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f96e 	bl	8000d68 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a8c:	200f      	movs	r0, #15
 8000a8e:	f000 f99d 	bl	8000dcc <HAL_NVIC_EnableIRQ>
 8000a92:	e75a      	b.n	800094a <HAL_UART_MspInit+0x16>
		__GPIOC_CLK_ENABLE();
 8000a94:	4c16      	ldr	r4, [pc, #88]	; (8000af0 <HAL_UART_MspInit+0x1bc>)
 8000a96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6323      	str	r3, [r4, #48]	; 0x30
 8000a9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	9305      	str	r3, [sp, #20]
 8000aa6:	9b05      	ldr	r3, [sp, #20]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000aa8:	2340      	movs	r3, #64	; 0x40
 8000aaa:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	9309      	str	r3, [sp, #36]	; 0x24
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	930a      	str	r3, [sp, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	930b      	str	r3, [sp, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000abc:	4d18      	ldr	r5, [pc, #96]	; (8000b20 <HAL_UART_MspInit+0x1ec>)
 8000abe:	a907      	add	r1, sp, #28
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	f000 fbbd 	bl	8001240 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	9307      	str	r3, [sp, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000aca:	a907      	add	r1, sp, #28
 8000acc:	4628      	mov	r0, r5
 8000ace:	f000 fbb7 	bl	8001240 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000ad2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ad4:	f043 0320 	orr.w	r3, r3, #32
 8000ad8:	6463      	str	r3, [r4, #68]	; 0x44
 8000ada:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000adc:	f003 0320 	and.w	r3, r3, #32
 8000ae0:	9306      	str	r3, [sp, #24]
 8000ae2:	9b06      	ldr	r3, [sp, #24]
}
 8000ae4:	e731      	b.n	800094a <HAL_UART_MspInit+0x16>
 8000ae6:	bf00      	nop
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	40011400 	.word	0x40011400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000
 8000af8:	200001f8 	.word	0x200001f8
 8000afc:	400264b8 	.word	0x400264b8
 8000b00:	20000098 	.word	0x20000098
 8000b04:	40026488 	.word	0x40026488
 8000b08:	20000178 	.word	0x20000178
 8000b0c:	200002b8 	.word	0x200002b8
 8000b10:	40026070 	.word	0x40026070
 8000b14:	20000258 	.word	0x20000258
 8000b18:	40026058 	.word	0x40026058
 8000b1c:	20000318 	.word	0x20000318
 8000b20:	40020800 	.word	0x40020800

08000b24 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000b24:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000b26:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000b28:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000b2e:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000b30:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000b32:	210c      	movs	r1, #12
 8000b34:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000b36:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000b38:	f001 fb67 	bl	800220a <HAL_UART_Init>
}
 8000b3c:	bd08      	pop	{r3, pc}
	...

08000b40 <_write>:
///////////////////////////////////////////////
// Change _write() and _read() to use DMAs
///////////////////////////////////////////////

// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b42:	460f      	mov	r7, r1
 8000b44:	4615      	mov	r5, r2
	HAL_DMA_Start(&hdma_tx, (uint32_t)ptr,(uint32_t)&USB_UART.Instance->TDR,len);
 8000b46:	4c0f      	ldr	r4, [pc, #60]	; (8000b84 <_write+0x44>)
 8000b48:	6822      	ldr	r2, [r4, #0]
 8000b4a:	4e0f      	ldr	r6, [pc, #60]	; (8000b88 <_write+0x48>)
 8000b4c:	462b      	mov	r3, r5
 8000b4e:	3228      	adds	r2, #40	; 0x28
 8000b50:	4630      	mov	r0, r6
 8000b52:	f000 fa3f 	bl	8000fd4 <HAL_DMA_Start>
	USB_UART.Instance->CR3 |= USART_CR3_DMAT;
 8000b56:	6822      	ldr	r2, [r4, #0]
 8000b58:	6893      	ldr	r3, [r2, #8]
 8000b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5e:	6093      	str	r3, [r2, #8]
	HAL_UART_Transmit_DMA(&USB_UART, (uint8_t*) ptr, len);
 8000b60:	b2aa      	uxth	r2, r5
 8000b62:	4639      	mov	r1, r7
 8000b64:	4620      	mov	r0, r4
 8000b66:	f000 ffc7 	bl	8001af8 <HAL_UART_Transmit_DMA>
	HAL_DMA_PollForTransfer(&hdma_tx, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8000b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4630      	mov	r0, r6
 8000b72:	f000 fad7 	bl	8001124 <HAL_DMA_PollForTransfer>
	USB_UART.Instance->CR3 &= ~USART_CR3_DMAT;
 8000b76:	6822      	ldr	r2, [r4, #0]
 8000b78:	6893      	ldr	r3, [r2, #8]
 8000b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b7e:	6093      	str	r3, [r2, #8]
	return len;
}
 8000b80:	4628      	mov	r0, r5
 8000b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b84:	20000178 	.word	0x20000178
 8000b88:	200001f8 	.word	0x200001f8

08000b8c <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8e:	460d      	mov	r5, r1

	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000b90:	2700      	movs	r7, #0
 8000b92:	700f      	strb	r7, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_DMA_Start(&hdma_rx,(uint32_t)&USB_UART.Instance->RDR,(uint32_t)ptr,len);
 8000b94:	4c0f      	ldr	r4, [pc, #60]	; (8000bd4 <_read+0x48>)
 8000b96:	6821      	ldr	r1, [r4, #0]
 8000b98:	4e0f      	ldr	r6, [pc, #60]	; (8000bd8 <_read+0x4c>)
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	462a      	mov	r2, r5
 8000b9e:	3124      	adds	r1, #36	; 0x24
 8000ba0:	4630      	mov	r0, r6
 8000ba2:	f000 fa17 	bl	8000fd4 <HAL_DMA_Start>
	USB_UART.Instance->CR3 |= USART_CR3_DMAR;
 8000ba6:	6822      	ldr	r2, [r4, #0]
 8000ba8:	6893      	ldr	r3, [r2, #8]
 8000baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bae:	6093      	str	r3, [r2, #8]
	HAL_UART_Receive_DMA(&USB_UART, (uint8_t*) ptr, len);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4629      	mov	r1, r5
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f000 fff3 	bl	8001ba0 <HAL_UART_Receive_DMA>
	HAL_DMA_PollForTransfer(&hdma_rx, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8000bba:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	f000 faaf 	bl	8001124 <HAL_DMA_PollForTransfer>
	USB_UART.Instance->CR3 &= ~USART_CR3_DMAR;
 8000bc6:	6822      	ldr	r2, [r4, #0]
 8000bc8:	6893      	ldr	r3, [r2, #8]
 8000bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bce:	6093      	str	r3, [r2, #8]
	return len;
}
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bd4:	20000178 	.word	0x20000178
 8000bd8:	20000098 	.word	0x20000098

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000be0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000be2:	e003      	b.n	8000bec <LoopCopyDataInit>

08000be4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000be6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000be8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bea:	3104      	adds	r1, #4

08000bec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bec:	480b      	ldr	r0, [pc, #44]	; (8000c1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bf4:	d3f6      	bcc.n	8000be4 <CopyDataInit>
  ldr  r2, =_sbss
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bf8:	e002      	b.n	8000c00 <LoopFillZerobss>

08000bfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bfc:	f842 3b04 	str.w	r3, [r2], #4

08000c00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c04:	d3f9      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c06:	f000 f813 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f001 fce9 	bl	80025e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fce7 	bl	80005e0 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000c18:	080035dc 	.word	0x080035dc
  ldr  r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c20:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000c24:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000c28:	20000384 	.word	0x20000384

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <SystemInit+0x40>)
 8000c34:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <SystemInit+0x44>)
 8000c42:	6819      	ldr	r1, [r3, #0]
 8000c44:	f041 0101 	orr.w	r1, r1, #1
 8000c48:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c4e:	681c      	ldr	r4, [r3, #0]
 8000c50:	4909      	ldr	r1, [pc, #36]	; (8000c78 <SystemInit+0x48>)
 8000c52:	4021      	ands	r1, r4
 8000c54:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c56:	4909      	ldr	r1, [pc, #36]	; (8000c7c <SystemInit+0x4c>)
 8000c58:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c5a:	6819      	ldr	r1, [r3, #0]
 8000c5c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000c60:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c62:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c68:	6093      	str	r3, [r2, #8]
#endif
}
 8000c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00
 8000c74:	40023800 	.word	0x40023800
 8000c78:	fef6ffff 	.word	0xfef6ffff
 8000c7c:	24003010 	.word	0x24003010

08000c80 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000c80:	4770      	bx	lr
	...

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b510      	push	{r4, lr}
 8000c86:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_InitTick+0x40>)
 8000c8a:	7818      	ldrb	r0, [r3, #0]
 8000c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c90:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c94:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <HAL_InitTick+0x44>)
 8000c96:	6810      	ldr	r0, [r2, #0]
 8000c98:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c9c:	f000 f8a4 	bl	8000de8 <HAL_SYSTICK_Config>
 8000ca0:	b968      	cbnz	r0, 8000cbe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	2c0f      	cmp	r4, #15
 8000ca4:	d901      	bls.n	8000caa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	e00a      	b.n	8000cc0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000caa:	2200      	movs	r2, #0
 8000cac:	4621      	mov	r1, r4
 8000cae:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb2:	f000 f859 	bl	8000d68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb6:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_InitTick+0x40>)
 8000cb8:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2000      	movs	r0, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
}
 8000cc0:	bd10      	pop	{r4, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000004 	.word	0x20000004
 8000cc8:	20000000 	.word	0x20000000

08000ccc <HAL_Init>:
{
 8000ccc:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_Init+0x28>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cd6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cde:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f82f 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f7ff ffcc 	bl	8000c84 <HAL_InitTick>
  HAL_MspInit();
 8000cec:	f7ff ffc8 	bl	8000c80 <HAL_MspInit>
}
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	bd08      	pop	{r3, pc}
 8000cf4:	40023c00 	.word	0x40023c00

08000cf8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000cf8:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <HAL_IncTick+0x10>)
 8000cfa:	6811      	ldr	r1, [r2, #0]
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_IncTick+0x14>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	440b      	add	r3, r1
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	2000037c 	.word	0x2000037c
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d10:	4b01      	ldr	r3, [pc, #4]	; (8000d18 <HAL_GetTick+0x8>)
 8000d12:	6818      	ldr	r0, [r3, #0]
}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	2000037c 	.word	0x2000037c

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff fff6 	bl	8000d10 <HAL_GetTick>
 8000d24:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000d2a:	d002      	beq.n	8000d32 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <HAL_Delay+0x24>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d32:	f7ff ffed 	bl	8000d10 <HAL_GetTick>
 8000d36:	1b40      	subs	r0, r0, r5
 8000d38:	42a0      	cmp	r0, r4
 8000d3a:	d3fa      	bcc.n	8000d32 <HAL_Delay+0x16>
  {
  }
}
 8000d3c:	bd38      	pop	{r3, r4, r5, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4906      	ldr	r1, [pc, #24]	; (8000d60 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000d46:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d4c:	041b      	lsls	r3, r3, #16
 8000d4e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	0200      	lsls	r0, r0, #8
 8000d52:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d56:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000d58:	4a02      	ldr	r2, [pc, #8]	; (8000d64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d5a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000d5c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00
 8000d64:	05fa0000 	.word	0x05fa0000

08000d68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d68:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_NVIC_SetPriority+0x58>)
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d72:	f1c3 0407 	rsb	r4, r3, #7
 8000d76:	2c04      	cmp	r4, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7c:	1d1d      	adds	r5, r3, #4
 8000d7e:	2d06      	cmp	r5, #6
 8000d80:	d914      	bls.n	8000dac <HAL_NVIC_SetPriority+0x44>
 8000d82:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 35ff 	mov.w	r5, #4294967295
 8000d88:	fa05 f404 	lsl.w	r4, r5, r4
 8000d8c:	ea21 0104 	bic.w	r1, r1, r4
 8000d90:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d92:	fa05 f303 	lsl.w	r3, r5, r3
 8000d96:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	db07      	blt.n	8000db0 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	0109      	lsls	r1, r1, #4
 8000da2:	b2c9      	uxtb	r1, r1
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <HAL_NVIC_SetPriority+0x5c>)
 8000da6:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000da8:	bc30      	pop	{r4, r5}
 8000daa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dac:	2300      	movs	r3, #0
 8000dae:	e7e9      	b.n	8000d84 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	f000 000f 	and.w	r0, r0, #15
 8000db4:	0109      	lsls	r1, r1, #4
 8000db6:	b2c9      	uxtb	r1, r1
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_NVIC_SetPriority+0x60>)
 8000dba:	5419      	strb	r1, [r3, r0]
 8000dbc:	e7f4      	b.n	8000da8 <HAL_NVIC_SetPriority+0x40>
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	e000e400 	.word	0xe000e400
 8000dc8:	e000ed14 	.word	0xe000ed14

08000dcc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	db07      	blt.n	8000de0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd0:	f000 021f 	and.w	r2, r0, #31
 8000dd4:	0940      	lsrs	r0, r0, #5
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	4093      	lsls	r3, r2
 8000dda:	4a02      	ldr	r2, [pc, #8]	; (8000de4 <HAL_NVIC_EnableIRQ+0x18>)
 8000ddc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	3801      	subs	r0, #1
 8000dea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000dee:	d20a      	bcs.n	8000e06 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_SYSTICK_Config+0x24>)
 8000df2:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <HAL_SYSTICK_Config+0x28>)
 8000df6:	21f0      	movs	r1, #240	; 0xf0
 8000df8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e14:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000e16:	6805      	ldr	r5, [r0, #0]
 8000e18:	682c      	ldr	r4, [r5, #0]
 8000e1a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000e1e:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000e20:	6804      	ldr	r4, [r0, #0]
 8000e22:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e24:	6883      	ldr	r3, [r0, #8]
 8000e26:	2b40      	cmp	r3, #64	; 0x40
 8000e28:	d005      	beq.n	8000e36 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000e2a:	6803      	ldr	r3, [r0, #0]
 8000e2c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000e2e:	6803      	ldr	r3, [r0, #0]
 8000e30:	60da      	str	r2, [r3, #12]
  }
}
 8000e32:	bc30      	pop	{r4, r5}
 8000e34:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000e36:	6803      	ldr	r3, [r0, #0]
 8000e38:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000e3a:	6803      	ldr	r3, [r0, #0]
 8000e3c:	60d9      	str	r1, [r3, #12]
 8000e3e:	e7f8      	b.n	8000e32 <DMA_SetConfig+0x1e>

08000e40 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e40:	6802      	ldr	r2, [r0, #0]
 8000e42:	b2d3      	uxtb	r3, r2
 8000e44:	3b10      	subs	r3, #16
 8000e46:	4909      	ldr	r1, [pc, #36]	; (8000e6c <DMA_CalcBaseAndBitshift+0x2c>)
 8000e48:	fba1 1303 	umull	r1, r3, r1, r3
 8000e4c:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <DMA_CalcBaseAndBitshift+0x30>)
 8000e50:	5cc9      	ldrb	r1, [r1, r3]
 8000e52:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d804      	bhi.n	8000e62 <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <DMA_CalcBaseAndBitshift+0x34>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8000e5e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000e60:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <DMA_CalcBaseAndBitshift+0x34>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	3304      	adds	r3, #4
 8000e68:	6583      	str	r3, [r0, #88]	; 0x58
 8000e6a:	e7f8      	b.n	8000e5e <DMA_CalcBaseAndBitshift+0x1e>
 8000e6c:	aaaaaaab 	.word	0xaaaaaaab
 8000e70:	0800343c 	.word	0x0800343c
 8000e74:	fffffc00 	.word	0xfffffc00

08000e78 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e78:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e7a:	6982      	ldr	r2, [r0, #24]
 8000e7c:	b992      	cbnz	r2, 8000ea4 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d00a      	beq.n	8000e98 <DMA_CheckFifoParam+0x20>
 8000e82:	b11b      	cbz	r3, 8000e8c <DMA_CheckFifoParam+0x14>
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d001      	beq.n	8000e8c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8000e88:	2000      	movs	r0, #0
 8000e8a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000e8e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000e92:	d12c      	bne.n	8000eee <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8000e94:	2000      	movs	r0, #0
 8000e96:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e98:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000e9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e9e:	d028      	beq.n	8000ef2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000ea4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000ea8:	d005      	beq.n	8000eb6 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d929      	bls.n	8000f02 <DMA_CheckFifoParam+0x8a>
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d015      	beq.n	8000ede <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	4770      	bx	lr
    switch (tmp)
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d803      	bhi.n	8000ec2 <DMA_CheckFifoParam+0x4a>
 8000eba:	e8df f003 	tbb	[pc, r3]
 8000ebe:	041c      	.short	0x041c
 8000ec0:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ec6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000ec8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000ecc:	d115      	bne.n	8000efa <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8000ece:	2000      	movs	r0, #0
 8000ed0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ed2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000ed4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ed8:	d011      	beq.n	8000efe <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8000eda:	2000      	movs	r0, #0
 8000edc:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ede:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000ee0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000ee4:	d001      	beq.n	8000eea <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8000ee6:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000ee8:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8000eea:	2000      	movs	r0, #0
 8000eec:	4770      	bx	lr
        status = HAL_ERROR;
 8000eee:	2001      	movs	r0, #1
 8000ef0:	4770      	bx	lr
        status = HAL_ERROR;
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	4770      	bx	lr
      status = HAL_ERROR;
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4770      	bx	lr
        status = HAL_ERROR;
 8000efa:	2001      	movs	r0, #1
 8000efc:	4770      	bx	lr
        status = HAL_ERROR;
 8000efe:	2001      	movs	r0, #1
 8000f00:	4770      	bx	lr
      status = HAL_ERROR;
 8000f02:	2001      	movs	r0, #1
 8000f04:	4770      	bx	lr
	...

08000f08 <HAL_DMA_Init>:
{
 8000f08:	b570      	push	{r4, r5, r6, lr}
 8000f0a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff ff00 	bl	8000d10 <HAL_GetTick>
  if(hdma == NULL)
 8000f10:	2c00      	cmp	r4, #0
 8000f12:	d05b      	beq.n	8000fcc <HAL_DMA_Init+0xc4>
 8000f14:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8000f16:	2300      	movs	r3, #0
 8000f18:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000f22:	6822      	ldr	r2, [r4, #0]
 8000f24:	6813      	ldr	r3, [r2, #0]
 8000f26:	f023 0301 	bic.w	r3, r3, #1
 8000f2a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	f012 0f01 	tst.w	r2, #1
 8000f34:	d00a      	beq.n	8000f4c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f36:	f7ff feeb 	bl	8000d10 <HAL_GetTick>
 8000f3a:	1b40      	subs	r0, r0, r5
 8000f3c:	2805      	cmp	r0, #5
 8000f3e:	d9f5      	bls.n	8000f2c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f40:	2320      	movs	r3, #32
 8000f42:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f44:	2003      	movs	r0, #3
 8000f46:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000f4c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f4e:	4820      	ldr	r0, [pc, #128]	; (8000fd0 <HAL_DMA_Init+0xc8>)
 8000f50:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f52:	6861      	ldr	r1, [r4, #4]
 8000f54:	68a2      	ldr	r2, [r4, #8]
 8000f56:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f58:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f5a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5c:	6921      	ldr	r1, [r4, #16]
 8000f5e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f60:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f62:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f64:	69a1      	ldr	r1, [r4, #24]
 8000f66:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f68:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f6a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f6c:	6a21      	ldr	r1, [r4, #32]
 8000f6e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f70:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f72:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f74:	2904      	cmp	r1, #4
 8000f76:	d01e      	beq.n	8000fb6 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000f78:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000f7a:	6826      	ldr	r6, [r4, #0]
 8000f7c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f7e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f84:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d107      	bne.n	8000f9a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000f8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f8c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f90:	b11b      	cbz	r3, 8000f9a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f92:	4620      	mov	r0, r4
 8000f94:	f7ff ff70 	bl	8000e78 <DMA_CheckFifoParam>
 8000f98:	b990      	cbnz	r0, 8000fc0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000f9a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f7ff ff4f 	bl	8000e40 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fa2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000fa4:	233f      	movs	r3, #63	; 0x3f
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000faa:	2000      	movs	r0, #0
 8000fac:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000fb4:	e7c9      	b.n	8000f4a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000fb8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000fba:	4301      	orrs	r1, r0
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	e7db      	b.n	8000f78 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fc0:	2340      	movs	r3, #64	; 0x40
 8000fc2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000fca:	e7be      	b.n	8000f4a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000fcc:	2001      	movs	r0, #1
 8000fce:	e7bc      	b.n	8000f4a <HAL_DMA_Init+0x42>
 8000fd0:	e010803f 	.word	0xe010803f

08000fd4 <HAL_DMA_Start>:
{
 8000fd4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8000fd6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000fda:	2c01      	cmp	r4, #1
 8000fdc:	d01c      	beq.n	8001018 <HAL_DMA_Start+0x44>
 8000fde:	2401      	movs	r4, #1
 8000fe0:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fe4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000fe8:	b2e4      	uxtb	r4, r4
 8000fea:	2c01      	cmp	r4, #1
 8000fec:	d004      	beq.n	8000ff8 <HAL_DMA_Start+0x24>
    __HAL_UNLOCK(hdma);
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8000ff4:	2002      	movs	r0, #2
}
 8000ff6:	bd38      	pop	{r3, r4, r5, pc}
 8000ff8:	4605      	mov	r5, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001000:	2400      	movs	r4, #0
 8001002:	656c      	str	r4, [r5, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001004:	4628      	mov	r0, r5
 8001006:	f7ff ff05 	bl	8000e14 <DMA_SetConfig>
    __HAL_DMA_ENABLE(hdma);
 800100a:	682a      	ldr	r2, [r5, #0]
 800100c:	6813      	ldr	r3, [r2, #0]
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001014:	4620      	mov	r0, r4
 8001016:	e7ee      	b.n	8000ff6 <HAL_DMA_Start+0x22>
  __HAL_LOCK(hdma);
 8001018:	2002      	movs	r0, #2
 800101a:	e7ec      	b.n	8000ff6 <HAL_DMA_Start+0x22>

0800101c <HAL_DMA_Start_IT>:
{
 800101c:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800101e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001020:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001024:	2c01      	cmp	r4, #1
 8001026:	d031      	beq.n	800108c <HAL_DMA_Start_IT+0x70>
 8001028:	2401      	movs	r4, #1
 800102a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800102e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001032:	b2e4      	uxtb	r4, r4
 8001034:	2c01      	cmp	r4, #1
 8001036:	d004      	beq.n	8001042 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8001038:	2300      	movs	r3, #0
 800103a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 800103e:	2002      	movs	r0, #2
}
 8001040:	bd38      	pop	{r3, r4, r5, pc}
 8001042:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001044:	2002      	movs	r0, #2
 8001046:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800104a:	2000      	movs	r0, #0
 800104c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800104e:	4620      	mov	r0, r4
 8001050:	f7ff fee0 	bl	8000e14 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001054:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001056:	233f      	movs	r3, #63	; 0x3f
 8001058:	4093      	lsls	r3, r2
 800105a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800105c:	6822      	ldr	r2, [r4, #0]
 800105e:	6813      	ldr	r3, [r2, #0]
 8001060:	f043 0316 	orr.w	r3, r3, #22
 8001064:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001066:	6822      	ldr	r2, [r4, #0]
 8001068:	6953      	ldr	r3, [r2, #20]
 800106a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106e:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001072:	b123      	cbz	r3, 800107e <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001074:	6822      	ldr	r2, [r4, #0]
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800107e:	6822      	ldr	r2, [r4, #0]
 8001080:	6813      	ldr	r3, [r2, #0]
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001088:	2000      	movs	r0, #0
 800108a:	e7d9      	b.n	8001040 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 800108c:	2002      	movs	r0, #2
 800108e:	e7d7      	b.n	8001040 <HAL_DMA_Start_IT+0x24>

08001090 <HAL_DMA_Abort>:
{
 8001090:	b570      	push	{r4, r5, r6, lr}
 8001092:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001094:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001096:	f7ff fe3b 	bl	8000d10 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800109a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d006      	beq.n	80010b2 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80010a8:	2300      	movs	r3, #0
 80010aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80010ae:	2001      	movs	r0, #1
}
 80010b0:	bd70      	pop	{r4, r5, r6, pc}
 80010b2:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010b4:	6822      	ldr	r2, [r4, #0]
 80010b6:	6813      	ldr	r3, [r2, #0]
 80010b8:	f023 0316 	bic.w	r3, r3, #22
 80010bc:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010be:	6822      	ldr	r2, [r4, #0]
 80010c0:	6953      	ldr	r3, [r2, #20]
 80010c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010c6:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ca:	b1e3      	cbz	r3, 8001106 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010cc:	6822      	ldr	r2, [r4, #0]
 80010ce:	6813      	ldr	r3, [r2, #0]
 80010d0:	f023 0308 	bic.w	r3, r3, #8
 80010d4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80010d6:	6822      	ldr	r2, [r4, #0]
 80010d8:	6813      	ldr	r3, [r2, #0]
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f013 0f01 	tst.w	r3, #1
 80010e8:	d011      	beq.n	800110e <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ea:	f7ff fe11 	bl	8000d10 <HAL_GetTick>
 80010ee:	1b40      	subs	r0, r0, r5
 80010f0:	2805      	cmp	r0, #5
 80010f2:	d9f5      	bls.n	80010e0 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f4:	2320      	movs	r3, #32
 80010f6:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80010f8:	2300      	movs	r3, #0
 80010fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010fe:	2003      	movs	r0, #3
 8001100:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8001104:	e7d4      	b.n	80010b0 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001106:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1df      	bne.n	80010cc <HAL_DMA_Abort+0x3c>
 800110c:	e7e3      	b.n	80010d6 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800110e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001110:	233f      	movs	r3, #63	; 0x3f
 8001112:	4093      	lsls	r3, r2
 8001114:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8001116:	2000      	movs	r0, #0
 8001118:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800111c:	2301      	movs	r3, #1
 800111e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001122:	e7c5      	b.n	80010b0 <HAL_DMA_Abort+0x20>

08001124 <HAL_DMA_PollForTransfer>:
{
 8001124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001128:	4604      	mov	r4, r0
 800112a:	4689      	mov	r9, r1
 800112c:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick(); 
 800112e:	f7ff fdef 	bl	8000d10 <HAL_GetTick>
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001132:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d007      	beq.n	800114c <HAL_DMA_PollForTransfer+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001140:	2300      	movs	r3, #0
 8001142:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001146:	2001      	movs	r0, #1
}
 8001148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800114c:	4680      	mov	r8, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001156:	d138      	bne.n	80011ca <HAL_DMA_PollForTransfer+0xa6>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001158:	f1b9 0f00 	cmp.w	r9, #0
 800115c:	d13a      	bne.n	80011d4 <HAL_DMA_PollForTransfer+0xb0>
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800115e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001160:	2720      	movs	r7, #32
 8001162:	409f      	lsls	r7, r3
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001164:	6da6      	ldr	r6, [r4, #88]	; 0x58
  tmpisr = regs->ISR;
 8001166:	6833      	ldr	r3, [r6, #0]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8001168:	421f      	tst	r7, r3
 800116a:	d141      	bne.n	80011f0 <HAL_DMA_PollForTransfer+0xcc>
 800116c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800116e:	f013 0f01 	tst.w	r3, #1
 8001172:	d13d      	bne.n	80011f0 <HAL_DMA_PollForTransfer+0xcc>
    if(Timeout != HAL_MAX_DELAY)
 8001174:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001178:	d007      	beq.n	800118a <HAL_DMA_PollForTransfer+0x66>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800117a:	2d00      	cmp	r5, #0
 800117c:	d02e      	beq.n	80011dc <HAL_DMA_PollForTransfer+0xb8>
 800117e:	f7ff fdc7 	bl	8000d10 <HAL_GetTick>
 8001182:	eba0 0008 	sub.w	r0, r0, r8
 8001186:	42a8      	cmp	r0, r5
 8001188:	d828      	bhi.n	80011dc <HAL_DMA_PollForTransfer+0xb8>
    tmpisr = regs->ISR;
 800118a:	6833      	ldr	r3, [r6, #0]
    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800118c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800118e:	2208      	movs	r2, #8
 8001190:	408a      	lsls	r2, r1
 8001192:	421a      	tst	r2, r3
 8001194:	d004      	beq.n	80011a0 <HAL_DMA_PollForTransfer+0x7c>
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001196:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001198:	f041 0101 	orr.w	r1, r1, #1
 800119c:	6561      	str	r1, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800119e:	60b2      	str	r2, [r6, #8]
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80011a2:	2201      	movs	r2, #1
 80011a4:	408a      	lsls	r2, r1
 80011a6:	421a      	tst	r2, r3
 80011a8:	d004      	beq.n	80011b4 <HAL_DMA_PollForTransfer+0x90>
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011aa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80011ac:	f041 0102 	orr.w	r1, r1, #2
 80011b0:	6561      	str	r1, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011b2:	60b2      	str	r2, [r6, #8]
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80011b6:	2204      	movs	r2, #4
 80011b8:	408a      	lsls	r2, r1
 80011ba:	421a      	tst	r2, r3
 80011bc:	d0d4      	beq.n	8001168 <HAL_DMA_PollForTransfer+0x44>
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011be:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80011c0:	f041 0104 	orr.w	r1, r1, #4
 80011c4:	6561      	str	r1, [r4, #84]	; 0x54
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011c6:	60b2      	str	r2, [r6, #8]
 80011c8:	e7ce      	b.n	8001168 <HAL_DMA_PollForTransfer+0x44>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80011ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ce:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 80011d0:	2001      	movs	r0, #1
 80011d2:	e7b9      	b.n	8001148 <HAL_DMA_PollForTransfer+0x24>
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011d6:	2710      	movs	r7, #16
 80011d8:	409f      	lsls	r7, r3
 80011da:	e7c3      	b.n	8001164 <HAL_DMA_PollForTransfer+0x40>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011dc:	2320      	movs	r3, #32
 80011de:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80011e0:	2300      	movs	r3, #0
 80011e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80011ec:	2003      	movs	r0, #3
 80011ee:	e7ab      	b.n	8001148 <HAL_DMA_PollForTransfer+0x24>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011f2:	b11b      	cbz	r3, 80011fc <HAL_DMA_PollForTransfer+0xd8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011f6:	f013 0f01 	tst.w	r3, #1
 80011fa:	d108      	bne.n	800120e <HAL_DMA_PollForTransfer+0xea>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80011fc:	f1b9 0f00 	cmp.w	r9, #0
 8001200:	d013      	beq.n	800122a <HAL_DMA_PollForTransfer+0x106>
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8001202:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001204:	2310      	movs	r3, #16
 8001206:	4093      	lsls	r3, r2
 8001208:	60b3      	str	r3, [r6, #8]
  return status;
 800120a:	2000      	movs	r0, #0
 800120c:	e79c      	b.n	8001148 <HAL_DMA_PollForTransfer+0x24>
      HAL_DMA_Abort(hdma);
 800120e:	4620      	mov	r0, r4
 8001210:	f7ff ff3e 	bl	8001090 <HAL_DMA_Abort>
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8001214:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001216:	2330      	movs	r3, #48	; 0x30
 8001218:	4093      	lsls	r3, r2
 800121a:	60b3      	str	r3, [r6, #8]
      __HAL_UNLOCK(hdma);
 800121c:	2300      	movs	r3, #0
 800121e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State= HAL_DMA_STATE_READY;
 8001222:	2001      	movs	r0, #1
 8001224:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_ERROR;
 8001228:	e78e      	b.n	8001148 <HAL_DMA_PollForTransfer+0x24>
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 800122a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800122c:	2330      	movs	r3, #48	; 0x30
 800122e:	4093      	lsls	r3, r2
 8001230:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8001232:	2000      	movs	r0, #0
 8001234:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001238:	2301      	movs	r3, #1
 800123a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800123e:	e783      	b.n	8001148 <HAL_DMA_PollForTransfer+0x24>

08001240 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001240:	2300      	movs	r3, #0
 8001242:	2b0f      	cmp	r3, #15
 8001244:	f200 80e2 	bhi.w	800140c <HAL_GPIO_Init+0x1cc>
{
 8001248:	b4f0      	push	{r4, r5, r6, r7}
 800124a:	b082      	sub	sp, #8
 800124c:	e039      	b.n	80012c2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800124e:	2209      	movs	r2, #9
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x14>
 8001252:	2200      	movs	r2, #0
 8001254:	40b2      	lsls	r2, r6
 8001256:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8001258:	3402      	adds	r4, #2
 800125a:	4e6d      	ldr	r6, [pc, #436]	; (8001410 <HAL_GPIO_Init+0x1d0>)
 800125c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001260:	4a6c      	ldr	r2, [pc, #432]	; (8001414 <HAL_GPIO_Init+0x1d4>)
 8001262:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001264:	43ea      	mvns	r2, r5
 8001266:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800126a:	684f      	ldr	r7, [r1, #4]
 800126c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001270:	d001      	beq.n	8001276 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001272:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001276:	4c67      	ldr	r4, [pc, #412]	; (8001414 <HAL_GPIO_Init+0x1d4>)
 8001278:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800127a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800127c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001280:	684f      	ldr	r7, [r1, #4]
 8001282:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001286:	d001      	beq.n	800128c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001288:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 800128c:	4c61      	ldr	r4, [pc, #388]	; (8001414 <HAL_GPIO_Init+0x1d4>)
 800128e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001290:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001292:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001296:	684f      	ldr	r7, [r1, #4]
 8001298:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800129c:	d001      	beq.n	80012a2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800129e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80012a2:	4c5c      	ldr	r4, [pc, #368]	; (8001414 <HAL_GPIO_Init+0x1d4>)
 80012a4:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80012a6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012aa:	684e      	ldr	r6, [r1, #4]
 80012ac:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80012b0:	d001      	beq.n	80012b6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80012b2:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80012b6:	4c57      	ldr	r4, [pc, #348]	; (8001414 <HAL_GPIO_Init+0x1d4>)
 80012b8:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ba:	3301      	adds	r3, #1
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	f200 80a2 	bhi.w	8001406 <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 80012c2:	2201      	movs	r2, #1
 80012c4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c6:	680c      	ldr	r4, [r1, #0]
 80012c8:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80012cc:	42aa      	cmp	r2, r5
 80012ce:	d1f4      	bne.n	80012ba <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d0:	684c      	ldr	r4, [r1, #4]
 80012d2:	2c12      	cmp	r4, #18
 80012d4:	bf18      	it	ne
 80012d6:	2c02      	cmpne	r4, #2
 80012d8:	d110      	bne.n	80012fc <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 80012da:	08de      	lsrs	r6, r3, #3
 80012dc:	3608      	adds	r6, #8
 80012de:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012e2:	f003 0407 	and.w	r4, r3, #7
 80012e6:	00a7      	lsls	r7, r4, #2
 80012e8:	240f      	movs	r4, #15
 80012ea:	40bc      	lsls	r4, r7
 80012ec:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012f0:	690c      	ldr	r4, [r1, #16]
 80012f2:	40bc      	lsls	r4, r7
 80012f4:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 80012f8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80012fc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012fe:	005f      	lsls	r7, r3, #1
 8001300:	2603      	movs	r6, #3
 8001302:	40be      	lsls	r6, r7
 8001304:	43f6      	mvns	r6, r6
 8001306:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800130a:	684c      	ldr	r4, [r1, #4]
 800130c:	f004 0403 	and.w	r4, r4, #3
 8001310:	40bc      	lsls	r4, r7
 8001312:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8001316:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001318:	684c      	ldr	r4, [r1, #4]
 800131a:	f104 3cff 	add.w	ip, r4, #4294967295
 800131e:	2c11      	cmp	r4, #17
 8001320:	bf18      	it	ne
 8001322:	f1bc 0f01 	cmpne.w	ip, #1
 8001326:	d901      	bls.n	800132c <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001328:	2c12      	cmp	r4, #18
 800132a:	d111      	bne.n	8001350 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 800132c:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800132e:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001332:	68cc      	ldr	r4, [r1, #12]
 8001334:	40bc      	lsls	r4, r7
 8001336:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 800133a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800133c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800133e:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001342:	684c      	ldr	r4, [r1, #4]
 8001344:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001348:	409a      	lsls	r2, r3
 800134a:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 800134e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001350:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001352:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001354:	688a      	ldr	r2, [r1, #8]
 8001356:	40ba      	lsls	r2, r7
 8001358:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 800135a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800135c:	684a      	ldr	r2, [r1, #4]
 800135e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001362:	d0aa      	beq.n	80012ba <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001364:	4a2c      	ldr	r2, [pc, #176]	; (8001418 <HAL_GPIO_Init+0x1d8>)
 8001366:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001368:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800136c:	6454      	str	r4, [r2, #68]	; 0x44
 800136e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001370:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001374:	9201      	str	r2, [sp, #4]
 8001376:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001378:	089c      	lsrs	r4, r3, #2
 800137a:	1ca6      	adds	r6, r4, #2
 800137c:	4a24      	ldr	r2, [pc, #144]	; (8001410 <HAL_GPIO_Init+0x1d0>)
 800137e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001382:	f003 0203 	and.w	r2, r3, #3
 8001386:	0096      	lsls	r6, r2, #2
 8001388:	220f      	movs	r2, #15
 800138a:	40b2      	lsls	r2, r6
 800138c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001390:	4a22      	ldr	r2, [pc, #136]	; (800141c <HAL_GPIO_Init+0x1dc>)
 8001392:	4290      	cmp	r0, r2
 8001394:	f43f af5d 	beq.w	8001252 <HAL_GPIO_Init+0x12>
 8001398:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800139c:	4290      	cmp	r0, r2
 800139e:	d022      	beq.n	80013e6 <HAL_GPIO_Init+0x1a6>
 80013a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013a4:	4290      	cmp	r0, r2
 80013a6:	d020      	beq.n	80013ea <HAL_GPIO_Init+0x1aa>
 80013a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ac:	4290      	cmp	r0, r2
 80013ae:	d01e      	beq.n	80013ee <HAL_GPIO_Init+0x1ae>
 80013b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013b4:	4290      	cmp	r0, r2
 80013b6:	d01c      	beq.n	80013f2 <HAL_GPIO_Init+0x1b2>
 80013b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013bc:	4290      	cmp	r0, r2
 80013be:	d01a      	beq.n	80013f6 <HAL_GPIO_Init+0x1b6>
 80013c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013c4:	4290      	cmp	r0, r2
 80013c6:	d018      	beq.n	80013fa <HAL_GPIO_Init+0x1ba>
 80013c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013cc:	4290      	cmp	r0, r2
 80013ce:	d016      	beq.n	80013fe <HAL_GPIO_Init+0x1be>
 80013d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013d4:	4290      	cmp	r0, r2
 80013d6:	d014      	beq.n	8001402 <HAL_GPIO_Init+0x1c2>
 80013d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013dc:	4290      	cmp	r0, r2
 80013de:	f43f af36 	beq.w	800124e <HAL_GPIO_Init+0xe>
 80013e2:	220a      	movs	r2, #10
 80013e4:	e736      	b.n	8001254 <HAL_GPIO_Init+0x14>
 80013e6:	2201      	movs	r2, #1
 80013e8:	e734      	b.n	8001254 <HAL_GPIO_Init+0x14>
 80013ea:	2202      	movs	r2, #2
 80013ec:	e732      	b.n	8001254 <HAL_GPIO_Init+0x14>
 80013ee:	2203      	movs	r2, #3
 80013f0:	e730      	b.n	8001254 <HAL_GPIO_Init+0x14>
 80013f2:	2204      	movs	r2, #4
 80013f4:	e72e      	b.n	8001254 <HAL_GPIO_Init+0x14>
 80013f6:	2205      	movs	r2, #5
 80013f8:	e72c      	b.n	8001254 <HAL_GPIO_Init+0x14>
 80013fa:	2206      	movs	r2, #6
 80013fc:	e72a      	b.n	8001254 <HAL_GPIO_Init+0x14>
 80013fe:	2207      	movs	r2, #7
 8001400:	e728      	b.n	8001254 <HAL_GPIO_Init+0x14>
 8001402:	2208      	movs	r2, #8
 8001404:	e726      	b.n	8001254 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001406:	b002      	add	sp, #8
 8001408:	bcf0      	pop	{r4, r5, r6, r7}
 800140a:	4770      	bx	lr
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40013800 	.word	0x40013800
 8001414:	40013c00 	.word	0x40013c00
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000

08001420 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001420:	b510      	push	{r4, lr}
 8001422:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_PWREx_EnableOverDrive+0x74>)
 8001426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001428:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001438:	4a17      	ldr	r2, [pc, #92]	; (8001498 <HAL_PWREx_EnableOverDrive+0x78>)
 800143a:	6813      	ldr	r3, [r2, #0]
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001442:	f7ff fc65 	bl	8000d10 <HAL_GetTick>
 8001446:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_PWREx_EnableOverDrive+0x78>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001450:	d108      	bne.n	8001464 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001452:	f7ff fc5d 	bl	8000d10 <HAL_GetTick>
 8001456:	1b00      	subs	r0, r0, r4
 8001458:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800145c:	d9f4      	bls.n	8001448 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800145e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001460:	b002      	add	sp, #8
 8001462:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001464:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <HAL_PWREx_EnableOverDrive+0x78>)
 8001466:	6813      	ldr	r3, [r2, #0]
 8001468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800146e:	f7ff fc4f 	bl	8000d10 <HAL_GetTick>
 8001472:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_PWREx_EnableOverDrive+0x78>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800147c:	d107      	bne.n	800148e <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800147e:	f7ff fc47 	bl	8000d10 <HAL_GetTick>
 8001482:	1b00      	subs	r0, r0, r4
 8001484:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001488:	d9f4      	bls.n	8001474 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 800148a:	2003      	movs	r0, #3
 800148c:	e7e8      	b.n	8001460 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800148e:	2000      	movs	r0, #0
 8001490:	e7e6      	b.n	8001460 <HAL_PWREx_EnableOverDrive+0x40>
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40007000 	.word	0x40007000

0800149c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800149c:	2800      	cmp	r0, #0
 800149e:	f000 81dc 	beq.w	800185a <HAL_RCC_OscConfig+0x3be>
{
 80014a2:	b570      	push	{r4, r5, r6, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a8:	6803      	ldr	r3, [r0, #0]
 80014aa:	f013 0f01 	tst.w	r3, #1
 80014ae:	d029      	beq.n	8001504 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b0:	4ba2      	ldr	r3, [pc, #648]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d01a      	beq.n	80014f2 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014bc:	4b9f      	ldr	r3, [pc, #636]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d00f      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c8:	6863      	ldr	r3, [r4, #4]
 80014ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ce:	d040      	beq.n	8001552 <HAL_RCC_OscConfig+0xb6>
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d154      	bne.n	800157e <HAL_RCC_OscConfig+0xe2>
 80014d4:	4b99      	ldr	r3, [pc, #612]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	e039      	b.n	800155c <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e8:	4b94      	ldr	r3, [pc, #592]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80014f0:	d0ea      	beq.n	80014c8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f2:	4b92      	ldr	r3, [pc, #584]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014fa:	d003      	beq.n	8001504 <HAL_RCC_OscConfig+0x68>
 80014fc:	6863      	ldr	r3, [r4, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 81ad 	beq.w	800185e <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	f013 0f02 	tst.w	r3, #2
 800150a:	d075      	beq.n	80015f8 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800150c:	4b8b      	ldr	r3, [pc, #556]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f013 0f0c 	tst.w	r3, #12
 8001514:	d05e      	beq.n	80015d4 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001516:	4b89      	ldr	r3, [pc, #548]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b08      	cmp	r3, #8
 8001520:	d053      	beq.n	80015ca <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001522:	68e3      	ldr	r3, [r4, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 808a 	beq.w	800163e <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152a:	4a84      	ldr	r2, [pc, #528]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 800152c:	6813      	ldr	r3, [r2, #0]
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fbec 	bl	8000d10 <HAL_GetTick>
 8001538:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153a:	4b80      	ldr	r3, [pc, #512]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f013 0f02 	tst.w	r3, #2
 8001542:	d173      	bne.n	800162c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff fbe4 	bl	8000d10 <HAL_GetTick>
 8001548:	1b40      	subs	r0, r0, r5
 800154a:	2802      	cmp	r0, #2
 800154c:	d9f5      	bls.n	800153a <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 800154e:	2003      	movs	r0, #3
 8001550:	e188      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001552:	4a7a      	ldr	r2, [pc, #488]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 8001554:	6813      	ldr	r3, [r2, #0]
 8001556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800155c:	6863      	ldr	r3, [r4, #4]
 800155e:	b32b      	cbz	r3, 80015ac <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001560:	f7ff fbd6 	bl	8000d10 <HAL_GetTick>
 8001564:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b75      	ldr	r3, [pc, #468]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800156e:	d1c9      	bne.n	8001504 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fbce 	bl	8000d10 <HAL_GetTick>
 8001574:	1b40      	subs	r0, r0, r5
 8001576:	2864      	cmp	r0, #100	; 0x64
 8001578:	d9f5      	bls.n	8001566 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800157a:	2003      	movs	r0, #3
 800157c:	e172      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001582:	d009      	beq.n	8001598 <HAL_RCC_OscConfig+0xfc>
 8001584:	4b6d      	ldr	r3, [pc, #436]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e7e1      	b.n	800155c <HAL_RCC_OscConfig+0xc0>
 8001598:	4b68      	ldr	r3, [pc, #416]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e7d7      	b.n	800155c <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80015ac:	f7ff fbb0 	bl	8000d10 <HAL_GetTick>
 80015b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	4b62      	ldr	r3, [pc, #392]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80015ba:	d0a3      	beq.n	8001504 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fba8 	bl	8000d10 <HAL_GetTick>
 80015c0:	1b40      	subs	r0, r0, r5
 80015c2:	2864      	cmp	r0, #100	; 0x64
 80015c4:	d9f5      	bls.n	80015b2 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80015c6:	2003      	movs	r0, #3
 80015c8:	e14c      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ca:	4b5c      	ldr	r3, [pc, #368]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015d2:	d1a6      	bne.n	8001522 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d4:	4b59      	ldr	r3, [pc, #356]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f013 0f02 	tst.w	r3, #2
 80015dc:	d004      	beq.n	80015e8 <HAL_RCC_OscConfig+0x14c>
 80015de:	68e3      	ldr	r3, [r4, #12]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 80015e4:	2001      	movs	r0, #1
 80015e6:	e13d      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e8:	4a54      	ldr	r2, [pc, #336]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 80015ea:	6813      	ldr	r3, [r2, #0]
 80015ec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015f0:	6921      	ldr	r1, [r4, #16]
 80015f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015f6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	f013 0f08 	tst.w	r3, #8
 80015fe:	d046      	beq.n	800168e <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001600:	6963      	ldr	r3, [r4, #20]
 8001602:	b383      	cbz	r3, 8001666 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001604:	4a4d      	ldr	r2, [pc, #308]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 8001606:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160e:	f7ff fb7f 	bl	8000d10 <HAL_GetTick>
 8001612:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001614:	4b49      	ldr	r3, [pc, #292]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 8001616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001618:	f013 0f02 	tst.w	r3, #2
 800161c:	d137      	bne.n	800168e <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161e:	f7ff fb77 	bl	8000d10 <HAL_GetTick>
 8001622:	1b40      	subs	r0, r0, r5
 8001624:	2802      	cmp	r0, #2
 8001626:	d9f5      	bls.n	8001614 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8001628:	2003      	movs	r0, #3
 800162a:	e11b      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4a43      	ldr	r2, [pc, #268]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 800162e:	6813      	ldr	r3, [r2, #0]
 8001630:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001634:	6921      	ldr	r1, [r4, #16]
 8001636:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	e7dc      	b.n	80015f8 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800163e:	4a3f      	ldr	r2, [pc, #252]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 8001640:	6813      	ldr	r3, [r2, #0]
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001648:	f7ff fb62 	bl	8000d10 <HAL_GetTick>
 800164c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f013 0f02 	tst.w	r3, #2
 8001656:	d0cf      	beq.n	80015f8 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001658:	f7ff fb5a 	bl	8000d10 <HAL_GetTick>
 800165c:	1b40      	subs	r0, r0, r5
 800165e:	2802      	cmp	r0, #2
 8001660:	d9f5      	bls.n	800164e <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8001662:	2003      	movs	r0, #3
 8001664:	e0fe      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001666:	4a35      	ldr	r2, [pc, #212]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 8001668:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff fb4e 	bl	8000d10 <HAL_GetTick>
 8001674:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 8001678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800167a:	f013 0f02 	tst.w	r3, #2
 800167e:	d006      	beq.n	800168e <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff fb46 	bl	8000d10 <HAL_GetTick>
 8001684:	1b40      	subs	r0, r0, r5
 8001686:	2802      	cmp	r0, #2
 8001688:	d9f5      	bls.n	8001676 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 800168a:	2003      	movs	r0, #3
 800168c:	e0ea      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	f013 0f04 	tst.w	r3, #4
 8001694:	d07e      	beq.n	8001794 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001696:	4b29      	ldr	r3, [pc, #164]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800169e:	d11e      	bne.n	80016de <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	4b26      	ldr	r3, [pc, #152]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 80016a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016b4:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <HAL_RCC_OscConfig+0x2a4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016be:	d010      	beq.n	80016e2 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c0:	68a3      	ldr	r3, [r4, #8]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d021      	beq.n	800170a <HAL_RCC_OscConfig+0x26e>
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d13c      	bne.n	8001744 <HAL_RCC_OscConfig+0x2a8>
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 80016cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	671a      	str	r2, [r3, #112]	; 0x70
 80016d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016d6:	f022 0204 	bic.w	r2, r2, #4
 80016da:	671a      	str	r2, [r3, #112]	; 0x70
 80016dc:	e01a      	b.n	8001714 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 80016de:	2500      	movs	r5, #0
 80016e0:	e7e9      	b.n	80016b6 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 80016e2:	4a17      	ldr	r2, [pc, #92]	; (8001740 <HAL_RCC_OscConfig+0x2a4>)
 80016e4:	6813      	ldr	r3, [r2, #0]
 80016e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ea:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80016ec:	f7ff fb10 	bl	8000d10 <HAL_GetTick>
 80016f0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <HAL_RCC_OscConfig+0x2a4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016fa:	d1e1      	bne.n	80016c0 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016fc:	f7ff fb08 	bl	8000d10 <HAL_GetTick>
 8001700:	1b80      	subs	r0, r0, r6
 8001702:	2864      	cmp	r0, #100	; 0x64
 8001704:	d9f5      	bls.n	80016f2 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001706:	2003      	movs	r0, #3
 8001708:	e0ac      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170a:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 800170c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001714:	68a3      	ldr	r3, [r4, #8]
 8001716:	b35b      	cbz	r3, 8001770 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff fafa 	bl	8000d10 <HAL_GetTick>
 800171c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <HAL_RCC_OscConfig+0x2a0>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	f013 0f02 	tst.w	r3, #2
 8001726:	d134      	bne.n	8001792 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7ff faf2 	bl	8000d10 <HAL_GetTick>
 800172c:	1b80      	subs	r0, r0, r6
 800172e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001732:	4298      	cmp	r0, r3
 8001734:	d9f3      	bls.n	800171e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8001736:	2003      	movs	r0, #3
 8001738:	e094      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001744:	2b05      	cmp	r3, #5
 8001746:	d009      	beq.n	800175c <HAL_RCC_OscConfig+0x2c0>
 8001748:	4b48      	ldr	r3, [pc, #288]	; (800186c <HAL_RCC_OscConfig+0x3d0>)
 800174a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	671a      	str	r2, [r3, #112]	; 0x70
 8001752:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001754:	f022 0204 	bic.w	r2, r2, #4
 8001758:	671a      	str	r2, [r3, #112]	; 0x70
 800175a:	e7db      	b.n	8001714 <HAL_RCC_OscConfig+0x278>
 800175c:	4b43      	ldr	r3, [pc, #268]	; (800186c <HAL_RCC_OscConfig+0x3d0>)
 800175e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001760:	f042 0204 	orr.w	r2, r2, #4
 8001764:	671a      	str	r2, [r3, #112]	; 0x70
 8001766:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001768:	f042 0201 	orr.w	r2, r2, #1
 800176c:	671a      	str	r2, [r3, #112]	; 0x70
 800176e:	e7d1      	b.n	8001714 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7ff face 	bl	8000d10 <HAL_GetTick>
 8001774:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001776:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_RCC_OscConfig+0x3d0>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	f013 0f02 	tst.w	r3, #2
 800177e:	d008      	beq.n	8001792 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff fac6 	bl	8000d10 <HAL_GetTick>
 8001784:	1b80      	subs	r0, r0, r6
 8001786:	f241 3388 	movw	r3, #5000	; 0x1388
 800178a:	4298      	cmp	r0, r3
 800178c:	d9f3      	bls.n	8001776 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 800178e:	2003      	movs	r0, #3
 8001790:	e068      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001792:	b9f5      	cbnz	r5, 80017d2 <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001794:	69a3      	ldr	r3, [r4, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d063      	beq.n	8001862 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179a:	4a34      	ldr	r2, [pc, #208]	; (800186c <HAL_RCC_OscConfig+0x3d0>)
 800179c:	6892      	ldr	r2, [r2, #8]
 800179e:	f002 020c 	and.w	r2, r2, #12
 80017a2:	2a08      	cmp	r2, #8
 80017a4:	d060      	beq.n	8001868 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d019      	beq.n	80017de <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4a30      	ldr	r2, [pc, #192]	; (800186c <HAL_RCC_OscConfig+0x3d0>)
 80017ac:	6813      	ldr	r3, [r2, #0]
 80017ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff faac 	bl	8000d10 <HAL_GetTick>
 80017b8:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <HAL_RCC_OscConfig+0x3d0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017c2:	d048      	beq.n	8001856 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff faa4 	bl	8000d10 <HAL_GetTick>
 80017c8:	1b00      	subs	r0, r0, r4
 80017ca:	2802      	cmp	r0, #2
 80017cc:	d9f5      	bls.n	80017ba <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80017ce:	2003      	movs	r0, #3
 80017d0:	e048      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d2:	4a26      	ldr	r2, [pc, #152]	; (800186c <HAL_RCC_OscConfig+0x3d0>)
 80017d4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	; 0x40
 80017dc:	e7da      	b.n	8001794 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80017de:	4a23      	ldr	r2, [pc, #140]	; (800186c <HAL_RCC_OscConfig+0x3d0>)
 80017e0:	6813      	ldr	r3, [r2, #0]
 80017e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017e8:	f7ff fa92 	bl	8000d10 <HAL_GetTick>
 80017ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_RCC_OscConfig+0x3d0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017f6:	d006      	beq.n	8001806 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff fa8a 	bl	8000d10 <HAL_GetTick>
 80017fc:	1b40      	subs	r0, r0, r5
 80017fe:	2802      	cmp	r0, #2
 8001800:	d9f5      	bls.n	80017ee <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8001802:	2003      	movs	r0, #3
 8001804:	e02e      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001806:	69e3      	ldr	r3, [r4, #28]
 8001808:	6a22      	ldr	r2, [r4, #32]
 800180a:	4313      	orrs	r3, r2
 800180c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800180e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001812:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001814:	0852      	lsrs	r2, r2, #1
 8001816:	3a01      	subs	r2, #1
 8001818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800181c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800181e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001822:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001824:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001828:	4a10      	ldr	r2, [pc, #64]	; (800186c <HAL_RCC_OscConfig+0x3d0>)
 800182a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800182c:	6813      	ldr	r3, [r2, #0]
 800182e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001832:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001834:	f7ff fa6c 	bl	8000d10 <HAL_GetTick>
 8001838:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_RCC_OscConfig+0x3d0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fa64 	bl	8000d10 <HAL_GetTick>
 8001848:	1b00      	subs	r0, r0, r4
 800184a:	2802      	cmp	r0, #2
 800184c:	d9f5      	bls.n	800183a <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 800184e:	2003      	movs	r0, #3
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001852:	2000      	movs	r0, #0
 8001854:	e006      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
 8001856:	2000      	movs	r0, #0
 8001858:	e004      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 800185a:	2001      	movs	r0, #1
}
 800185c:	4770      	bx	lr
        return HAL_ERROR;
 800185e:	2001      	movs	r0, #1
 8001860:	e000      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 8001862:	2000      	movs	r0, #0
}
 8001864:	b002      	add	sp, #8
 8001866:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001868:	2001      	movs	r0, #1
 800186a:	e7fb      	b.n	8001864 <HAL_RCC_OscConfig+0x3c8>
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001870:	4b26      	ldr	r3, [pc, #152]	; (800190c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b04      	cmp	r3, #4
 800187a:	d044      	beq.n	8001906 <HAL_RCC_GetSysClockFreq+0x96>
 800187c:	2b08      	cmp	r3, #8
 800187e:	d001      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001880:	4823      	ldr	r0, [pc, #140]	; (8001910 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001882:	4770      	bx	lr
{
 8001884:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001888:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_RCC_GetSysClockFreq+0x9c>)
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001896:	d013      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001898:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_RCC_GetSysClockFreq+0x9c>)
 800189a:	6859      	ldr	r1, [r3, #4]
 800189c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80018a0:	2300      	movs	r3, #0
 80018a2:	481c      	ldr	r0, [pc, #112]	; (8001914 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018a4:	fba1 0100 	umull	r0, r1, r1, r0
 80018a8:	f7fe fd1a 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_RCC_GetSysClockFreq+0x9c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80018b4:	3301      	adds	r3, #1
 80018b6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80018b8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018bc:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_RCC_GetSysClockFreq+0x9c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80018c8:	461e      	mov	r6, r3
 80018ca:	2700      	movs	r7, #0
 80018cc:	015c      	lsls	r4, r3, #5
 80018ce:	2500      	movs	r5, #0
 80018d0:	1ae4      	subs	r4, r4, r3
 80018d2:	eb65 0507 	sbc.w	r5, r5, r7
 80018d6:	01a9      	lsls	r1, r5, #6
 80018d8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80018dc:	01a0      	lsls	r0, r4, #6
 80018de:	1b00      	subs	r0, r0, r4
 80018e0:	eb61 0105 	sbc.w	r1, r1, r5
 80018e4:	00cb      	lsls	r3, r1, #3
 80018e6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80018ea:	00c4      	lsls	r4, r0, #3
 80018ec:	19a0      	adds	r0, r4, r6
 80018ee:	eb43 0107 	adc.w	r1, r3, r7
 80018f2:	028b      	lsls	r3, r1, #10
 80018f4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80018f8:	0284      	lsls	r4, r0, #10
 80018fa:	4620      	mov	r0, r4
 80018fc:	4619      	mov	r1, r3
 80018fe:	2300      	movs	r3, #0
 8001900:	f7fe fcee 	bl	80002e0 <__aeabi_uldivmod>
 8001904:	e7d2      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8001906:	4803      	ldr	r0, [pc, #12]	; (8001914 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	00f42400 	.word	0x00f42400
 8001914:	017d7840 	.word	0x017d7840

08001918 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001918:	2800      	cmp	r0, #0
 800191a:	f000 80a2 	beq.w	8001a62 <HAL_RCC_ClockConfig+0x14a>
{
 800191e:	b570      	push	{r4, r5, r6, lr}
 8001920:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001922:	4b52      	ldr	r3, [pc, #328]	; (8001a6c <HAL_RCC_ClockConfig+0x154>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	428b      	cmp	r3, r1
 800192c:	d20c      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4a4f      	ldr	r2, [pc, #316]	; (8001a6c <HAL_RCC_ClockConfig+0x154>)
 8001930:	6813      	ldr	r3, [r2, #0]
 8001932:	f023 030f 	bic.w	r3, r3, #15
 8001936:	430b      	orrs	r3, r1
 8001938:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	6813      	ldr	r3, [r2, #0]
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	428b      	cmp	r3, r1
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001944:	2001      	movs	r0, #1
}
 8001946:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	f013 0f02 	tst.w	r3, #2
 800194e:	d017      	beq.n	8001980 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	f013 0f04 	tst.w	r3, #4
 8001954:	d004      	beq.n	8001960 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001956:	4a46      	ldr	r2, [pc, #280]	; (8001a70 <HAL_RCC_ClockConfig+0x158>)
 8001958:	6893      	ldr	r3, [r2, #8]
 800195a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800195e:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	f013 0f08 	tst.w	r3, #8
 8001966:	d004      	beq.n	8001972 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001968:	4a41      	ldr	r2, [pc, #260]	; (8001a70 <HAL_RCC_ClockConfig+0x158>)
 800196a:	6893      	ldr	r3, [r2, #8]
 800196c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001970:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001972:	4a3f      	ldr	r2, [pc, #252]	; (8001a70 <HAL_RCC_ClockConfig+0x158>)
 8001974:	6893      	ldr	r3, [r2, #8]
 8001976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800197a:	68a0      	ldr	r0, [r4, #8]
 800197c:	4303      	orrs	r3, r0
 800197e:	6093      	str	r3, [r2, #8]
 8001980:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	f013 0f01 	tst.w	r3, #1
 8001988:	d031      	beq.n	80019ee <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198a:	6863      	ldr	r3, [r4, #4]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001990:	2b02      	cmp	r3, #2
 8001992:	d025      	beq.n	80019e0 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001994:	4a36      	ldr	r2, [pc, #216]	; (8001a70 <HAL_RCC_ClockConfig+0x158>)
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	f012 0f02 	tst.w	r2, #2
 800199c:	d063      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4934      	ldr	r1, [pc, #208]	; (8001a70 <HAL_RCC_ClockConfig+0x158>)
 80019a0:	688a      	ldr	r2, [r1, #8]
 80019a2:	f022 0203 	bic.w	r2, r2, #3
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80019aa:	f7ff f9b1 	bl	8000d10 <HAL_GetTick>
 80019ae:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b0:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_RCC_ClockConfig+0x158>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	6862      	ldr	r2, [r4, #4]
 80019ba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019be:	d016      	beq.n	80019ee <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c0:	f7ff f9a6 	bl	8000d10 <HAL_GetTick>
 80019c4:	1b80      	subs	r0, r0, r6
 80019c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80019ca:	4298      	cmp	r0, r3
 80019cc:	d9f0      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80019ce:	2003      	movs	r0, #3
 80019d0:	e7b9      	b.n	8001946 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4a27      	ldr	r2, [pc, #156]	; (8001a70 <HAL_RCC_ClockConfig+0x158>)
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80019da:	d1e0      	bne.n	800199e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80019dc:	2001      	movs	r0, #1
 80019de:	e7b2      	b.n	8001946 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e0:	4a23      	ldr	r2, [pc, #140]	; (8001a70 <HAL_RCC_ClockConfig+0x158>)
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80019e8:	d1d9      	bne.n	800199e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80019ea:	2001      	movs	r0, #1
 80019ec:	e7ab      	b.n	8001946 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <HAL_RCC_ClockConfig+0x154>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	42ab      	cmp	r3, r5
 80019f8:	d90c      	bls.n	8001a14 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <HAL_RCC_ClockConfig+0x154>)
 80019fc:	6813      	ldr	r3, [r2, #0]
 80019fe:	f023 030f 	bic.w	r3, r3, #15
 8001a02:	432b      	orrs	r3, r5
 8001a04:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	6813      	ldr	r3, [r2, #0]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	42ab      	cmp	r3, r5
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8001a10:	2001      	movs	r0, #1
 8001a12:	e798      	b.n	8001946 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	f013 0f04 	tst.w	r3, #4
 8001a1a:	d006      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_RCC_ClockConfig+0x158>)
 8001a1e:	6893      	ldr	r3, [r2, #8]
 8001a20:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a24:	68e1      	ldr	r1, [r4, #12]
 8001a26:	430b      	orrs	r3, r1
 8001a28:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	f013 0f08 	tst.w	r3, #8
 8001a30:	d007      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a32:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <HAL_RCC_ClockConfig+0x158>)
 8001a34:	6893      	ldr	r3, [r2, #8]
 8001a36:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a3a:	6921      	ldr	r1, [r4, #16]
 8001a3c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a40:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a42:	f7ff ff15 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_RCC_ClockConfig+0x158>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a4e:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <HAL_RCC_ClockConfig+0x15c>)
 8001a50:	5cd3      	ldrb	r3, [r2, r3]
 8001a52:	40d8      	lsrs	r0, r3
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_RCC_ClockConfig+0x160>)
 8001a56:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a58:	200f      	movs	r0, #15
 8001a5a:	f7ff f913 	bl	8000c84 <HAL_InitTick>
  return HAL_OK;
 8001a5e:	2000      	movs	r0, #0
 8001a60:	e771      	b.n	8001946 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001a62:	2001      	movs	r0, #1
}
 8001a64:	4770      	bx	lr
        return HAL_ERROR;
 8001a66:	2001      	movs	r0, #1
 8001a68:	e76d      	b.n	8001946 <HAL_RCC_ClockConfig+0x2e>
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00
 8001a70:	40023800 	.word	0x40023800
 8001a74:	08003424 	.word	0x08003424
 8001a78:	20000000 	.word	0x20000000

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a7c:	4b01      	ldr	r3, [pc, #4]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a8a:	f7ff fff7 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a96:	4a03      	ldr	r2, [pc, #12]	; (8001aa4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
}
 8001a9a:	40d8      	lsrs	r0, r3
 8001a9c:	bd08      	pop	{r3, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08003434 	.word	0x08003434

08001aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001aaa:	f7ff ffe7 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001ab6:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ab8:	5cd3      	ldrb	r3, [r2, r3]
}
 8001aba:	40d8      	lsrs	r0, r3
 8001abc:	bd08      	pop	{r3, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	08003434 	.word	0x08003434

08001ac8 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001ac8:	6802      	ldr	r2, [r0, #0]
 8001aca:	6813      	ldr	r3, [r2, #0]
 8001acc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ad0:	6013      	str	r3, [r2, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ad2:	2320      	movs	r3, #32
 8001ad4:	6743      	str	r3, [r0, #116]	; 0x74
}
 8001ad6:	4770      	bx	lr

08001ad8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ad8:	6802      	ldr	r2, [r0, #0]
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001ae0:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ae2:	6802      	ldr	r2, [r0, #0]
 8001ae4:	6893      	ldr	r3, [r2, #8]
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001aec:	2320      	movs	r3, #32
 8001aee:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001af4:	4770      	bx	lr
	...

08001af8 <HAL_UART_Transmit_DMA>:
{
 8001af8:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8001afa:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8001afc:	2c20      	cmp	r4, #32
 8001afe:	d142      	bne.n	8001b86 <HAL_UART_Transmit_DMA+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8001b00:	fab2 f582 	clz	r5, r2
 8001b04:	096d      	lsrs	r5, r5, #5
 8001b06:	2900      	cmp	r1, #0
 8001b08:	bf08      	it	eq
 8001b0a:	2501      	moveq	r5, #1
 8001b0c:	2d00      	cmp	r5, #0
 8001b0e:	d13c      	bne.n	8001b8a <HAL_UART_Transmit_DMA+0x92>
    __HAL_LOCK(huart);
 8001b10:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d03a      	beq.n	8001b8e <HAL_UART_Transmit_DMA+0x96>
 8001b18:	4613      	mov	r3, r2
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 8001b22:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001b24:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8001b28:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b30:	2221      	movs	r2, #33	; 0x21
 8001b32:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8001b34:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001b36:	b18a      	cbz	r2, 8001b5c <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001b38:	4916      	ldr	r1, [pc, #88]	; (8001b94 <HAL_UART_Transmit_DMA+0x9c>)
 8001b3a:	63d1      	str	r1, [r2, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001b3c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001b3e:	4916      	ldr	r1, [pc, #88]	; (8001b98 <HAL_UART_Transmit_DMA+0xa0>)
 8001b40:	6411      	str	r1, [r2, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001b42:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001b44:	4915      	ldr	r1, [pc, #84]	; (8001b9c <HAL_UART_Transmit_DMA+0xa4>)
 8001b46:	64d1      	str	r1, [r2, #76]	; 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 8001b48:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	6511      	str	r1, [r2, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8001b4e:	6802      	ldr	r2, [r0, #0]
 8001b50:	3228      	adds	r2, #40	; 0x28
 8001b52:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001b54:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8001b56:	f7ff fa61 	bl	800101c <HAL_DMA_Start_IT>
 8001b5a:	b958      	cbnz	r0, 8001b74 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	2240      	movs	r2, #64	; 0x40
 8001b60:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001b68:	6822      	ldr	r2, [r4, #0]
 8001b6a:	6893      	ldr	r3, [r2, #8]
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b70:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8001b72:	e009      	b.n	8001b88 <HAL_UART_Transmit_DMA+0x90>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001b74:	2310      	movs	r3, #16
 8001b76:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8001b7e:	2320      	movs	r3, #32
 8001b80:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 8001b82:	2001      	movs	r0, #1
 8001b84:	e000      	b.n	8001b88 <HAL_UART_Transmit_DMA+0x90>
    return HAL_BUSY;
 8001b86:	2002      	movs	r0, #2
}
 8001b88:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	e7fc      	b.n	8001b88 <HAL_UART_Transmit_DMA+0x90>
    __HAL_LOCK(huart);
 8001b8e:	2002      	movs	r0, #2
 8001b90:	e7fa      	b.n	8001b88 <HAL_UART_Transmit_DMA+0x90>
 8001b92:	bf00      	nop
 8001b94:	08001c53 	.word	0x08001c53
 8001b98:	08001c85 	.word	0x08001c85
 8001b9c:	08001cdb 	.word	0x08001cdb

08001ba0 <HAL_UART_Receive_DMA>:
{
 8001ba0:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ba2:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8001ba4:	2c20      	cmp	r4, #32
 8001ba6:	d147      	bne.n	8001c38 <HAL_UART_Receive_DMA+0x98>
    if ((pData == NULL) || (Size == 0U))
 8001ba8:	fab2 f582 	clz	r5, r2
 8001bac:	096d      	lsrs	r5, r5, #5
 8001bae:	2900      	cmp	r1, #0
 8001bb0:	bf08      	it	eq
 8001bb2:	2501      	moveq	r5, #1
 8001bb4:	2d00      	cmp	r5, #0
 8001bb6:	d141      	bne.n	8001c3c <HAL_UART_Receive_DMA+0x9c>
    __HAL_LOCK(huart);
 8001bb8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d03f      	beq.n	8001c40 <HAL_UART_Receive_DMA+0xa0>
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->pRxBuffPtr = pData;
 8001bca:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8001bcc:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bd4:	2222      	movs	r2, #34	; 0x22
 8001bd6:	6782      	str	r2, [r0, #120]	; 0x78
    if (huart->hdmarx != NULL)
 8001bd8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001bda:	b18a      	cbz	r2, 8001c00 <HAL_UART_Receive_DMA+0x60>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001bdc:	4919      	ldr	r1, [pc, #100]	; (8001c44 <HAL_UART_Receive_DMA+0xa4>)
 8001bde:	63d1      	str	r1, [r2, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001be0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001be2:	4919      	ldr	r1, [pc, #100]	; (8001c48 <HAL_UART_Receive_DMA+0xa8>)
 8001be4:	6411      	str	r1, [r2, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001be6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001be8:	4918      	ldr	r1, [pc, #96]	; (8001c4c <HAL_UART_Receive_DMA+0xac>)
 8001bea:	64d1      	str	r1, [r2, #76]	; 0x4c
      huart->hdmarx->XferAbortCallback = NULL;
 8001bec:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001bee:	2100      	movs	r1, #0
 8001bf0:	6511      	str	r1, [r2, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001bf2:	6801      	ldr	r1, [r0, #0]
 8001bf4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001bf6:	3124      	adds	r1, #36	; 0x24
 8001bf8:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8001bfa:	f7ff fa0f 	bl	800101c <HAL_DMA_Start_IT>
 8001bfe:	b990      	cbnz	r0, 8001c26 <HAL_UART_Receive_DMA+0x86>
    __HAL_UNLOCK(huart);
 8001c00:	2000      	movs	r0, #0
 8001c02:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c06:	6822      	ldr	r2, [r4, #0]
 8001c08:	6813      	ldr	r3, [r2, #0]
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c10:	6822      	ldr	r2, [r4, #0]
 8001c12:	6893      	ldr	r3, [r2, #8]
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c1a:	6822      	ldr	r2, [r4, #0]
 8001c1c:	6893      	ldr	r3, [r2, #8]
 8001c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c22:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8001c24:	e009      	b.n	8001c3a <HAL_UART_Receive_DMA+0x9a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001c26:	2310      	movs	r3, #16
 8001c28:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8001c30:	2320      	movs	r3, #32
 8001c32:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 8001c34:	2001      	movs	r0, #1
 8001c36:	e000      	b.n	8001c3a <HAL_UART_Receive_DMA+0x9a>
    return HAL_BUSY;
 8001c38:	2002      	movs	r0, #2
}
 8001c3a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	e7fc      	b.n	8001c3a <HAL_UART_Receive_DMA+0x9a>
    __HAL_LOCK(huart);
 8001c40:	2002      	movs	r0, #2
 8001c42:	e7fa      	b.n	8001c3a <HAL_UART_Receive_DMA+0x9a>
 8001c44:	08001c91 	.word	0x08001c91
 8001c48:	08001ccf 	.word	0x08001ccf
 8001c4c:	08001cdb 	.word	0x08001cdb

08001c50 <HAL_UART_TxCpltCallback>:
}
 8001c50:	4770      	bx	lr

08001c52 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001c52:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001c54:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8001c56:	69c2      	ldr	r2, [r0, #28]
 8001c58:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001c5c:	d00d      	beq.n	8001c7a <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	688a      	ldr	r2, [r1, #8]
 8001c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c6c:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c76:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001c78:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ffe8 	bl	8001c50 <HAL_UART_TxCpltCallback>
}
 8001c80:	e7fa      	b.n	8001c78 <UART_DMATransmitCplt+0x26>

08001c82 <HAL_UART_TxHalfCpltCallback>:
}
 8001c82:	4770      	bx	lr

08001c84 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001c84:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001c86:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001c88:	f7ff fffb 	bl	8001c82 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001c8c:	bd08      	pop	{r3, pc}

08001c8e <HAL_UART_RxCpltCallback>:
}
 8001c8e:	4770      	bx	lr

08001c90 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001c90:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001c92:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8001c94:	69c2      	ldr	r2, [r0, #28]
 8001c96:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001c9a:	d013      	beq.n	8001cc4 <UART_DMAReceiveCplt+0x34>
  {
    huart->RxXferCount = 0U;
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ca2:	6819      	ldr	r1, [r3, #0]
 8001ca4:	680a      	ldr	r2, [r1, #0]
 8001ca6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001caa:	600a      	str	r2, [r1, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	688a      	ldr	r2, [r1, #8]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	608a      	str	r2, [r1, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cb6:	6819      	ldr	r1, [r3, #0]
 8001cb8:	688a      	ldr	r2, [r1, #8]
 8001cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cbe:	608a      	str	r2, [r1, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ffe2 	bl	8001c8e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001cca:	bd08      	pop	{r3, pc}

08001ccc <HAL_UART_RxHalfCpltCallback>:
}
 8001ccc:	4770      	bx	lr

08001cce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001cce:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8001cd0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001cd2:	f7ff fffb 	bl	8001ccc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001cd6:	bd08      	pop	{r3, pc}

08001cd8 <HAL_UART_ErrorCallback>:
}
 8001cd8:	4770      	bx	lr

08001cda <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cda:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001cdc:	6b84      	ldr	r4, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8001cde:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8001ce0:	6fa5      	ldr	r5, [r4, #120]	; 0x78

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cea:	d001      	beq.n	8001cf0 <UART_DMAError+0x16>
 8001cec:	2a21      	cmp	r2, #33	; 0x21
 8001cee:	d00e      	beq.n	8001d0e <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001cf8:	d001      	beq.n	8001cfe <UART_DMAError+0x24>
 8001cfa:	2d22      	cmp	r5, #34	; 0x22
 8001cfc:	d00e      	beq.n	8001d1c <UART_DMAError+0x42>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001cfe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001d00:	f043 0310 	orr.w	r3, r3, #16
 8001d04:	67e3      	str	r3, [r4, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7ff ffe6 	bl	8001cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d0c:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8001d14:	4620      	mov	r0, r4
 8001d16:	f7ff fed7 	bl	8001ac8 <UART_EndTxTransfer>
 8001d1a:	e7e9      	b.n	8001cf0 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8001d22:	4620      	mov	r0, r4
 8001d24:	f7ff fed8 	bl	8001ad8 <UART_EndRxTransfer>
 8001d28:	e7e9      	b.n	8001cfe <UART_DMAError+0x24>
	...

08001d2c <UART_SetConfig>:
{
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d30:	6883      	ldr	r3, [r0, #8]
 8001d32:	6902      	ldr	r2, [r0, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	6942      	ldr	r2, [r0, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	69c2      	ldr	r2, [r0, #28]
 8001d3c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d3e:	6801      	ldr	r1, [r0, #0]
 8001d40:	6808      	ldr	r0, [r1, #0]
 8001d42:	4a99      	ldr	r2, [pc, #612]	; (8001fa8 <UART_SetConfig+0x27c>)
 8001d44:	4002      	ands	r2, r0
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d4a:	6822      	ldr	r2, [r4, #0]
 8001d4c:	6853      	ldr	r3, [r2, #4]
 8001d4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d52:	68e1      	ldr	r1, [r4, #12]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d58:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8001d5a:	6a23      	ldr	r3, [r4, #32]
 8001d5c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d5e:	6821      	ldr	r1, [r4, #0]
 8001d60:	688b      	ldr	r3, [r1, #8]
 8001d62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	4a8f      	ldr	r2, [pc, #572]	; (8001fac <UART_SetConfig+0x280>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d018      	beq.n	8001da4 <UART_SetConfig+0x78>
 8001d72:	4a8f      	ldr	r2, [pc, #572]	; (8001fb0 <UART_SetConfig+0x284>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d028      	beq.n	8001dca <UART_SetConfig+0x9e>
 8001d78:	4a8e      	ldr	r2, [pc, #568]	; (8001fb4 <UART_SetConfig+0x288>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d03d      	beq.n	8001dfa <UART_SetConfig+0xce>
 8001d7e:	4a8e      	ldr	r2, [pc, #568]	; (8001fb8 <UART_SetConfig+0x28c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d050      	beq.n	8001e26 <UART_SetConfig+0xfa>
 8001d84:	4a8d      	ldr	r2, [pc, #564]	; (8001fbc <UART_SetConfig+0x290>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d062      	beq.n	8001e50 <UART_SetConfig+0x124>
 8001d8a:	4a8d      	ldr	r2, [pc, #564]	; (8001fc0 <UART_SetConfig+0x294>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d077      	beq.n	8001e80 <UART_SetConfig+0x154>
 8001d90:	4a8c      	ldr	r2, [pc, #560]	; (8001fc4 <UART_SetConfig+0x298>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	f000 808c 	beq.w	8001eb0 <UART_SetConfig+0x184>
 8001d98:	4a8b      	ldr	r2, [pc, #556]	; (8001fc8 <UART_SetConfig+0x29c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	f000 80a0 	beq.w	8001ee0 <UART_SetConfig+0x1b4>
 8001da0:	2310      	movs	r3, #16
 8001da2:	e0b6      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001da4:	4b89      	ldr	r3, [pc, #548]	; (8001fcc <UART_SetConfig+0x2a0>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d809      	bhi.n	8001dc6 <UART_SetConfig+0x9a>
 8001db2:	e8df f003 	tbb	[pc, r3]
 8001db6:	0402      	.short	0x0402
 8001db8:	06ad      	.short	0x06ad
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0a9      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	e0a7      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001dc2:	2308      	movs	r3, #8
 8001dc4:	e0a5      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	e0a3      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001dca:	4b80      	ldr	r3, [pc, #512]	; (8001fcc <UART_SetConfig+0x2a0>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b0c      	cmp	r3, #12
 8001dd6:	d80e      	bhi.n	8001df6 <UART_SetConfig+0xca>
 8001dd8:	e8df f003 	tbb	[pc, r3]
 8001ddc:	0d0d0d07 	.word	0x0d0d0d07
 8001de0:	0d0d0d09 	.word	0x0d0d0d09
 8001de4:	0d0d0da9 	.word	0x0d0d0da9
 8001de8:	0b          	.byte	0x0b
 8001de9:	00          	.byte	0x00
 8001dea:	2300      	movs	r3, #0
 8001dec:	e091      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001dee:	2304      	movs	r3, #4
 8001df0:	e08f      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001df2:	2308      	movs	r3, #8
 8001df4:	e08d      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001df6:	2310      	movs	r3, #16
 8001df8:	e08b      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001dfa:	4b74      	ldr	r3, [pc, #464]	; (8001fcc <UART_SetConfig+0x2a0>)
 8001dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d00a      	beq.n	8001e1e <UART_SetConfig+0xf2>
 8001e08:	d906      	bls.n	8001e18 <UART_SetConfig+0xec>
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	f000 8091 	beq.w	8001f32 <UART_SetConfig+0x206>
 8001e10:	2b30      	cmp	r3, #48	; 0x30
 8001e12:	d106      	bne.n	8001e22 <UART_SetConfig+0xf6>
 8001e14:	2308      	movs	r3, #8
 8001e16:	e07c      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001e18:	b91b      	cbnz	r3, 8001e22 <UART_SetConfig+0xf6>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e079      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	e077      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001e22:	2310      	movs	r3, #16
 8001e24:	e075      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001e26:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <UART_SetConfig+0x2a0>)
 8001e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001e30:	2b40      	cmp	r3, #64	; 0x40
 8001e32:	d009      	beq.n	8001e48 <UART_SetConfig+0x11c>
 8001e34:	d905      	bls.n	8001e42 <UART_SetConfig+0x116>
 8001e36:	2b80      	cmp	r3, #128	; 0x80
 8001e38:	d07d      	beq.n	8001f36 <UART_SetConfig+0x20a>
 8001e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8001e3c:	d106      	bne.n	8001e4c <UART_SetConfig+0x120>
 8001e3e:	2308      	movs	r3, #8
 8001e40:	e067      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001e42:	b91b      	cbnz	r3, 8001e4c <UART_SetConfig+0x120>
 8001e44:	2300      	movs	r3, #0
 8001e46:	e064      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001e48:	2304      	movs	r3, #4
 8001e4a:	e062      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001e4c:	2310      	movs	r3, #16
 8001e4e:	e060      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001e50:	4b5e      	ldr	r3, [pc, #376]	; (8001fcc <UART_SetConfig+0x2a0>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e5e:	d00b      	beq.n	8001e78 <UART_SetConfig+0x14c>
 8001e60:	d907      	bls.n	8001e72 <UART_SetConfig+0x146>
 8001e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e66:	d068      	beq.n	8001f3a <UART_SetConfig+0x20e>
 8001e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e6c:	d106      	bne.n	8001e7c <UART_SetConfig+0x150>
 8001e6e:	2308      	movs	r3, #8
 8001e70:	e04f      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001e72:	b91b      	cbnz	r3, 8001e7c <UART_SetConfig+0x150>
 8001e74:	2300      	movs	r3, #0
 8001e76:	e04c      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001e78:	2304      	movs	r3, #4
 8001e7a:	e04a      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001e7c:	2310      	movs	r3, #16
 8001e7e:	e048      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001e80:	4b52      	ldr	r3, [pc, #328]	; (8001fcc <UART_SetConfig+0x2a0>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8e:	d00b      	beq.n	8001ea8 <UART_SetConfig+0x17c>
 8001e90:	d907      	bls.n	8001ea2 <UART_SetConfig+0x176>
 8001e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e96:	d052      	beq.n	8001f3e <UART_SetConfig+0x212>
 8001e98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001e9c:	d106      	bne.n	8001eac <UART_SetConfig+0x180>
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	e037      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001ea2:	b91b      	cbnz	r3, 8001eac <UART_SetConfig+0x180>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e034      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	e032      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001eac:	2310      	movs	r3, #16
 8001eae:	e030      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001eb0:	4b46      	ldr	r3, [pc, #280]	; (8001fcc <UART_SetConfig+0x2a0>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ebe:	d00b      	beq.n	8001ed8 <UART_SetConfig+0x1ac>
 8001ec0:	d907      	bls.n	8001ed2 <UART_SetConfig+0x1a6>
 8001ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec6:	d03c      	beq.n	8001f42 <UART_SetConfig+0x216>
 8001ec8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ecc:	d106      	bne.n	8001edc <UART_SetConfig+0x1b0>
 8001ece:	2308      	movs	r3, #8
 8001ed0:	e01f      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001ed2:	b91b      	cbnz	r3, 8001edc <UART_SetConfig+0x1b0>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e01c      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001ed8:	2304      	movs	r3, #4
 8001eda:	e01a      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001edc:	2310      	movs	r3, #16
 8001ede:	e018      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <UART_SetConfig+0x2a0>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eee:	d00b      	beq.n	8001f08 <UART_SetConfig+0x1dc>
 8001ef0:	d907      	bls.n	8001f02 <UART_SetConfig+0x1d6>
 8001ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ef6:	d026      	beq.n	8001f46 <UART_SetConfig+0x21a>
 8001ef8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001efc:	d106      	bne.n	8001f0c <UART_SetConfig+0x1e0>
 8001efe:	2308      	movs	r3, #8
 8001f00:	e007      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001f02:	b91b      	cbnz	r3, 8001f0c <UART_SetConfig+0x1e0>
 8001f04:	2300      	movs	r3, #0
 8001f06:	e004      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001f08:	2304      	movs	r3, #4
 8001f0a:	e002      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001f0c:	2310      	movs	r3, #16
 8001f0e:	e000      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001f10:	2302      	movs	r3, #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f12:	69e2      	ldr	r2, [r4, #28]
 8001f14:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f18:	d017      	beq.n	8001f4a <UART_SetConfig+0x21e>
    switch (clocksource)
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	f200 80b3 	bhi.w	8002086 <UART_SetConfig+0x35a>
 8001f20:	e8df f003 	tbb	[pc, r3]
 8001f24:	b1958b76 	.word	0xb1958b76
 8001f28:	b1b1b19e 	.word	0xb1b1b19e
 8001f2c:	a8          	.byte	0xa8
 8001f2d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e7ef      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e7ed      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e7eb      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e7e9      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e7e7      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e7e5      	b.n	8001f12 <UART_SetConfig+0x1e6>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e7e3      	b.n	8001f12 <UART_SetConfig+0x1e6>
    switch (clocksource)
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d85d      	bhi.n	800200a <UART_SetConfig+0x2de>
 8001f4e:	e8df f003 	tbb	[pc, r3]
 8001f52:	1f05      	.short	0x1f05
 8001f54:	5c485c3f 	.word	0x5c485c3f
 8001f58:	5c5c      	.short	0x5c5c
 8001f5a:	53          	.byte	0x53
 8001f5b:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f5c:	f7ff fd94 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8001f60:	6862      	ldr	r2, [r4, #4]
 8001f62:	0853      	lsrs	r3, r2, #1
 8001f64:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001f68:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f6c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f6e:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f70:	f1a3 0110 	sub.w	r1, r3, #16
 8001f74:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001f78:	4291      	cmp	r1, r2
 8001f7a:	f200 8087 	bhi.w	800208c <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f84:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001f88:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8001f8a:	6822      	ldr	r2, [r4, #0]
 8001f8c:	60d3      	str	r3, [r2, #12]
 8001f8e:	e050      	b.n	8002032 <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f90:	f7ff fd8a 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8001f94:	6862      	ldr	r2, [r4, #4]
 8001f96:	0853      	lsrs	r3, r2, #1
 8001f98:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001f9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fa0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fa2:	2000      	movs	r0, #0
        break;
 8001fa4:	e7e4      	b.n	8001f70 <UART_SetConfig+0x244>
 8001fa6:	bf00      	nop
 8001fa8:	efff69f3 	.word	0xefff69f3
 8001fac:	40011000 	.word	0x40011000
 8001fb0:	40004400 	.word	0x40004400
 8001fb4:	40004800 	.word	0x40004800
 8001fb8:	40004c00 	.word	0x40004c00
 8001fbc:	40005000 	.word	0x40005000
 8001fc0:	40011400 	.word	0x40011400
 8001fc4:	40007800 	.word	0x40007800
 8001fc8:	40007c00 	.word	0x40007c00
 8001fcc:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001fd0:	6862      	ldr	r2, [r4, #4]
 8001fd2:	4b30      	ldr	r3, [pc, #192]	; (8002094 <UART_SetConfig+0x368>)
 8001fd4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fdc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fde:	2000      	movs	r0, #0
        break;
 8001fe0:	e7c6      	b.n	8001f70 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fe2:	f7ff fc45 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 8001fe6:	6862      	ldr	r2, [r4, #4]
 8001fe8:	0853      	lsrs	r3, r2, #1
 8001fea:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001fee:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ff2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ff4:	2000      	movs	r0, #0
        break;
 8001ff6:	e7bb      	b.n	8001f70 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ff8:	6862      	ldr	r2, [r4, #4]
 8001ffa:	0853      	lsrs	r3, r2, #1
 8001ffc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002000:	fbb3 f3f2 	udiv	r3, r3, r2
 8002004:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002006:	2000      	movs	r0, #0
        break;
 8002008:	e7b2      	b.n	8001f70 <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 800200a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800200c:	2300      	movs	r3, #0
 800200e:	e7af      	b.n	8001f70 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002010:	f7ff fd3a 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002014:	6862      	ldr	r2, [r4, #4]
 8002016:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800201a:	fbb3 f3f2 	udiv	r3, r3, r2
 800201e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002020:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002022:	f1a3 0110 	sub.w	r1, r3, #16
 8002026:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800202a:	4291      	cmp	r1, r2
 800202c:	d830      	bhi.n	8002090 <UART_SetConfig+0x364>
      huart->Instance->BRR = usartdiv;
 800202e:	6822      	ldr	r2, [r4, #0]
 8002030:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8002032:	2300      	movs	r3, #0
 8002034:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002036:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002038:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800203a:	f7ff fd35 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 800203e:	6862      	ldr	r2, [r4, #4]
 8002040:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002044:	fbb3 f3f2 	udiv	r3, r3, r2
 8002048:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800204a:	2000      	movs	r0, #0
        break;
 800204c:	e7e9      	b.n	8002022 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800204e:	6862      	ldr	r2, [r4, #4]
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <UART_SetConfig+0x36c>)
 8002052:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002056:	fbb3 f3f2 	udiv	r3, r3, r2
 800205a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800205c:	2000      	movs	r0, #0
        break;
 800205e:	e7e0      	b.n	8002022 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002060:	f7ff fc06 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 8002064:	6862      	ldr	r2, [r4, #4]
 8002066:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800206a:	fbb3 f3f2 	udiv	r3, r3, r2
 800206e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002070:	2000      	movs	r0, #0
        break;
 8002072:	e7d6      	b.n	8002022 <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002074:	6862      	ldr	r2, [r4, #4]
 8002076:	0853      	lsrs	r3, r2, #1
 8002078:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800207c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002080:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002082:	2000      	movs	r0, #0
        break;
 8002084:	e7cd      	b.n	8002022 <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8002086:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002088:	2300      	movs	r3, #0
 800208a:	e7ca      	b.n	8002022 <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 800208c:	2001      	movs	r0, #1
 800208e:	e7d0      	b.n	8002032 <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 8002090:	2001      	movs	r0, #1
 8002092:	e7ce      	b.n	8002032 <UART_SetConfig+0x306>
 8002094:	01e84800 	.word	0x01e84800
 8002098:	00f42400 	.word	0x00f42400

0800209c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800209c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800209e:	f013 0f01 	tst.w	r3, #1
 80020a2:	d006      	beq.n	80020b2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020a4:	6802      	ldr	r2, [r0, #0]
 80020a6:	6853      	ldr	r3, [r2, #4]
 80020a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80020ac:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80020ae:	430b      	orrs	r3, r1
 80020b0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020b4:	f013 0f02 	tst.w	r3, #2
 80020b8:	d006      	beq.n	80020c8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020ba:	6802      	ldr	r2, [r0, #0]
 80020bc:	6853      	ldr	r3, [r2, #4]
 80020be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80020c4:	430b      	orrs	r3, r1
 80020c6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020ca:	f013 0f04 	tst.w	r3, #4
 80020ce:	d006      	beq.n	80020de <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020d0:	6802      	ldr	r2, [r0, #0]
 80020d2:	6853      	ldr	r3, [r2, #4]
 80020d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80020da:	430b      	orrs	r3, r1
 80020dc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020e0:	f013 0f08 	tst.w	r3, #8
 80020e4:	d006      	beq.n	80020f4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020e6:	6802      	ldr	r2, [r0, #0]
 80020e8:	6853      	ldr	r3, [r2, #4]
 80020ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020ee:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80020f0:	430b      	orrs	r3, r1
 80020f2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020f6:	f013 0f10 	tst.w	r3, #16
 80020fa:	d006      	beq.n	800210a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020fc:	6802      	ldr	r2, [r0, #0]
 80020fe:	6893      	ldr	r3, [r2, #8]
 8002100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002104:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002106:	430b      	orrs	r3, r1
 8002108:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800210a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800210c:	f013 0f20 	tst.w	r3, #32
 8002110:	d006      	beq.n	8002120 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002112:	6802      	ldr	r2, [r0, #0]
 8002114:	6893      	ldr	r3, [r2, #8]
 8002116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800211a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800211c:	430b      	orrs	r3, r1
 800211e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002120:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002122:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002126:	d00a      	beq.n	800213e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002128:	6802      	ldr	r2, [r0, #0]
 800212a:	6853      	ldr	r3, [r2, #4]
 800212c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002130:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002132:	430b      	orrs	r3, r1
 8002134:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002136:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800213c:	d00b      	beq.n	8002156 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800213e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002140:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002144:	d006      	beq.n	8002154 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002146:	6802      	ldr	r2, [r0, #0]
 8002148:	6853      	ldr	r3, [r2, #4]
 800214a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800214e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002150:	430b      	orrs	r3, r1
 8002152:	6053      	str	r3, [r2, #4]
}
 8002154:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002156:	6802      	ldr	r2, [r0, #0]
 8002158:	6853      	ldr	r3, [r2, #4]
 800215a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800215e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002160:	430b      	orrs	r3, r1
 8002162:	6053      	str	r3, [r2, #4]
 8002164:	e7eb      	b.n	800213e <UART_AdvFeatureConfig+0xa2>

08002166 <UART_WaitOnFlagUntilTimeout>:
{
 8002166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800216a:	4605      	mov	r5, r0
 800216c:	460f      	mov	r7, r1
 800216e:	4616      	mov	r6, r2
 8002170:	4698      	mov	r8, r3
 8002172:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	ea37 0303 	bics.w	r3, r7, r3
 800217c:	bf0c      	ite	eq
 800217e:	2301      	moveq	r3, #1
 8002180:	2300      	movne	r3, #0
 8002182:	42b3      	cmp	r3, r6
 8002184:	d11c      	bne.n	80021c0 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002186:	f1b4 3fff 	cmp.w	r4, #4294967295
 800218a:	d0f3      	beq.n	8002174 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218c:	f7fe fdc0 	bl	8000d10 <HAL_GetTick>
 8002190:	eba0 0008 	sub.w	r0, r0, r8
 8002194:	42a0      	cmp	r0, r4
 8002196:	d801      	bhi.n	800219c <UART_WaitOnFlagUntilTimeout+0x36>
 8002198:	2c00      	cmp	r4, #0
 800219a:	d1eb      	bne.n	8002174 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800219c:	682a      	ldr	r2, [r5, #0]
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021a4:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a6:	682a      	ldr	r2, [r5, #0]
 80021a8:	6893      	ldr	r3, [r2, #8]
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80021b0:	2320      	movs	r3, #32
 80021b2:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80021b4:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80021b6:	2300      	movs	r3, #0
 80021b8:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 80021bc:	2003      	movs	r0, #3
 80021be:	e000      	b.n	80021c2 <UART_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 80021c0:	2000      	movs	r0, #0
}
 80021c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080021c6 <UART_CheckIdleState>:
{
 80021c6:	b510      	push	{r4, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80021d0:	f7fe fd9e 	bl	8000d10 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021d4:	6822      	ldr	r2, [r4, #0]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	f012 0f08 	tst.w	r2, #8
 80021dc:	d107      	bne.n	80021ee <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 80021de:	2320      	movs	r3, #32
 80021e0:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80021e2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80021ea:	b002      	add	sp, #8
 80021ec:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	4603      	mov	r3, r0
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7ff ffb2 	bl	8002166 <UART_WaitOnFlagUntilTimeout>
 8002202:	2800      	cmp	r0, #0
 8002204:	d0eb      	beq.n	80021de <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002206:	2003      	movs	r0, #3
 8002208:	e7ef      	b.n	80021ea <UART_CheckIdleState+0x24>

0800220a <HAL_UART_Init>:
  if (huart == NULL)
 800220a:	b368      	cbz	r0, 8002268 <HAL_UART_Init+0x5e>
{
 800220c:	b510      	push	{r4, lr}
 800220e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002210:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002212:	b303      	cbz	r3, 8002256 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002214:	2324      	movs	r3, #36	; 0x24
 8002216:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002218:	6822      	ldr	r2, [r4, #0]
 800221a:	6813      	ldr	r3, [r2, #0]
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002222:	4620      	mov	r0, r4
 8002224:	f7ff fd82 	bl	8001d2c <UART_SetConfig>
 8002228:	2801      	cmp	r0, #1
 800222a:	d013      	beq.n	8002254 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800222c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800222e:	b9bb      	cbnz	r3, 8002260 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002230:	6822      	ldr	r2, [r4, #0]
 8002232:	6853      	ldr	r3, [r2, #4]
 8002234:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002238:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800223a:	6822      	ldr	r2, [r4, #0]
 800223c:	6893      	ldr	r3, [r2, #8]
 800223e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002242:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002244:	6822      	ldr	r2, [r4, #0]
 8002246:	6813      	ldr	r3, [r2, #0]
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff ffb9 	bl	80021c6 <UART_CheckIdleState>
}
 8002254:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002256:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800225a:	f7fe fb6b 	bl	8000934 <HAL_UART_MspInit>
 800225e:	e7d9      	b.n	8002214 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8002260:	4620      	mov	r0, r4
 8002262:	f7ff ff1b 	bl	800209c <UART_AdvFeatureConfig>
 8002266:	e7e3      	b.n	8002230 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8002268:	2001      	movs	r0, #1
}
 800226a:	4770      	bx	lr

0800226c <__sflush_r>:
 800226c:	898a      	ldrh	r2, [r1, #12]
 800226e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002272:	4605      	mov	r5, r0
 8002274:	0710      	lsls	r0, r2, #28
 8002276:	460c      	mov	r4, r1
 8002278:	d458      	bmi.n	800232c <__sflush_r+0xc0>
 800227a:	684b      	ldr	r3, [r1, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	dc05      	bgt.n	800228c <__sflush_r+0x20>
 8002280:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	dc02      	bgt.n	800228c <__sflush_r+0x20>
 8002286:	2000      	movs	r0, #0
 8002288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800228c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800228e:	2e00      	cmp	r6, #0
 8002290:	d0f9      	beq.n	8002286 <__sflush_r+0x1a>
 8002292:	2300      	movs	r3, #0
 8002294:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002298:	682f      	ldr	r7, [r5, #0]
 800229a:	6a21      	ldr	r1, [r4, #32]
 800229c:	602b      	str	r3, [r5, #0]
 800229e:	d032      	beq.n	8002306 <__sflush_r+0x9a>
 80022a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022a2:	89a3      	ldrh	r3, [r4, #12]
 80022a4:	075a      	lsls	r2, r3, #29
 80022a6:	d505      	bpl.n	80022b4 <__sflush_r+0x48>
 80022a8:	6863      	ldr	r3, [r4, #4]
 80022aa:	1ac0      	subs	r0, r0, r3
 80022ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022ae:	b10b      	cbz	r3, 80022b4 <__sflush_r+0x48>
 80022b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022b2:	1ac0      	subs	r0, r0, r3
 80022b4:	2300      	movs	r3, #0
 80022b6:	4602      	mov	r2, r0
 80022b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022ba:	6a21      	ldr	r1, [r4, #32]
 80022bc:	4628      	mov	r0, r5
 80022be:	47b0      	blx	r6
 80022c0:	1c43      	adds	r3, r0, #1
 80022c2:	89a3      	ldrh	r3, [r4, #12]
 80022c4:	d106      	bne.n	80022d4 <__sflush_r+0x68>
 80022c6:	6829      	ldr	r1, [r5, #0]
 80022c8:	291d      	cmp	r1, #29
 80022ca:	d848      	bhi.n	800235e <__sflush_r+0xf2>
 80022cc:	4a29      	ldr	r2, [pc, #164]	; (8002374 <__sflush_r+0x108>)
 80022ce:	40ca      	lsrs	r2, r1
 80022d0:	07d6      	lsls	r6, r2, #31
 80022d2:	d544      	bpl.n	800235e <__sflush_r+0xf2>
 80022d4:	2200      	movs	r2, #0
 80022d6:	6062      	str	r2, [r4, #4]
 80022d8:	04d9      	lsls	r1, r3, #19
 80022da:	6922      	ldr	r2, [r4, #16]
 80022dc:	6022      	str	r2, [r4, #0]
 80022de:	d504      	bpl.n	80022ea <__sflush_r+0x7e>
 80022e0:	1c42      	adds	r2, r0, #1
 80022e2:	d101      	bne.n	80022e8 <__sflush_r+0x7c>
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	b903      	cbnz	r3, 80022ea <__sflush_r+0x7e>
 80022e8:	6560      	str	r0, [r4, #84]	; 0x54
 80022ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022ec:	602f      	str	r7, [r5, #0]
 80022ee:	2900      	cmp	r1, #0
 80022f0:	d0c9      	beq.n	8002286 <__sflush_r+0x1a>
 80022f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022f6:	4299      	cmp	r1, r3
 80022f8:	d002      	beq.n	8002300 <__sflush_r+0x94>
 80022fa:	4628      	mov	r0, r5
 80022fc:	f000 f99c 	bl	8002638 <_free_r>
 8002300:	2000      	movs	r0, #0
 8002302:	6360      	str	r0, [r4, #52]	; 0x34
 8002304:	e7c0      	b.n	8002288 <__sflush_r+0x1c>
 8002306:	2301      	movs	r3, #1
 8002308:	4628      	mov	r0, r5
 800230a:	47b0      	blx	r6
 800230c:	1c41      	adds	r1, r0, #1
 800230e:	d1c8      	bne.n	80022a2 <__sflush_r+0x36>
 8002310:	682b      	ldr	r3, [r5, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0c5      	beq.n	80022a2 <__sflush_r+0x36>
 8002316:	2b1d      	cmp	r3, #29
 8002318:	d001      	beq.n	800231e <__sflush_r+0xb2>
 800231a:	2b16      	cmp	r3, #22
 800231c:	d101      	bne.n	8002322 <__sflush_r+0xb6>
 800231e:	602f      	str	r7, [r5, #0]
 8002320:	e7b1      	b.n	8002286 <__sflush_r+0x1a>
 8002322:	89a3      	ldrh	r3, [r4, #12]
 8002324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002328:	81a3      	strh	r3, [r4, #12]
 800232a:	e7ad      	b.n	8002288 <__sflush_r+0x1c>
 800232c:	690f      	ldr	r7, [r1, #16]
 800232e:	2f00      	cmp	r7, #0
 8002330:	d0a9      	beq.n	8002286 <__sflush_r+0x1a>
 8002332:	0793      	lsls	r3, r2, #30
 8002334:	680e      	ldr	r6, [r1, #0]
 8002336:	bf08      	it	eq
 8002338:	694b      	ldreq	r3, [r1, #20]
 800233a:	600f      	str	r7, [r1, #0]
 800233c:	bf18      	it	ne
 800233e:	2300      	movne	r3, #0
 8002340:	eba6 0807 	sub.w	r8, r6, r7
 8002344:	608b      	str	r3, [r1, #8]
 8002346:	f1b8 0f00 	cmp.w	r8, #0
 800234a:	dd9c      	ble.n	8002286 <__sflush_r+0x1a>
 800234c:	4643      	mov	r3, r8
 800234e:	463a      	mov	r2, r7
 8002350:	6a21      	ldr	r1, [r4, #32]
 8002352:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002354:	4628      	mov	r0, r5
 8002356:	47b0      	blx	r6
 8002358:	2800      	cmp	r0, #0
 800235a:	dc06      	bgt.n	800236a <__sflush_r+0xfe>
 800235c:	89a3      	ldrh	r3, [r4, #12]
 800235e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002362:	81a3      	strh	r3, [r4, #12]
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	e78e      	b.n	8002288 <__sflush_r+0x1c>
 800236a:	4407      	add	r7, r0
 800236c:	eba8 0800 	sub.w	r8, r8, r0
 8002370:	e7e9      	b.n	8002346 <__sflush_r+0xda>
 8002372:	bf00      	nop
 8002374:	20400001 	.word	0x20400001

08002378 <_fflush_r>:
 8002378:	b538      	push	{r3, r4, r5, lr}
 800237a:	690b      	ldr	r3, [r1, #16]
 800237c:	4605      	mov	r5, r0
 800237e:	460c      	mov	r4, r1
 8002380:	b1db      	cbz	r3, 80023ba <_fflush_r+0x42>
 8002382:	b118      	cbz	r0, 800238c <_fflush_r+0x14>
 8002384:	6983      	ldr	r3, [r0, #24]
 8002386:	b90b      	cbnz	r3, 800238c <_fflush_r+0x14>
 8002388:	f000 f872 	bl	8002470 <__sinit>
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <_fflush_r+0x48>)
 800238e:	429c      	cmp	r4, r3
 8002390:	d109      	bne.n	80023a6 <_fflush_r+0x2e>
 8002392:	686c      	ldr	r4, [r5, #4]
 8002394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002398:	b17b      	cbz	r3, 80023ba <_fflush_r+0x42>
 800239a:	4621      	mov	r1, r4
 800239c:	4628      	mov	r0, r5
 800239e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023a2:	f7ff bf63 	b.w	800226c <__sflush_r>
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <_fflush_r+0x4c>)
 80023a8:	429c      	cmp	r4, r3
 80023aa:	d101      	bne.n	80023b0 <_fflush_r+0x38>
 80023ac:	68ac      	ldr	r4, [r5, #8]
 80023ae:	e7f1      	b.n	8002394 <_fflush_r+0x1c>
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <_fflush_r+0x50>)
 80023b2:	429c      	cmp	r4, r3
 80023b4:	bf08      	it	eq
 80023b6:	68ec      	ldreq	r4, [r5, #12]
 80023b8:	e7ec      	b.n	8002394 <_fflush_r+0x1c>
 80023ba:	2000      	movs	r0, #0
 80023bc:	bd38      	pop	{r3, r4, r5, pc}
 80023be:	bf00      	nop
 80023c0:	08003554 	.word	0x08003554
 80023c4:	08003574 	.word	0x08003574
 80023c8:	08003534 	.word	0x08003534

080023cc <fflush>:
 80023cc:	4601      	mov	r1, r0
 80023ce:	b920      	cbnz	r0, 80023da <fflush+0xe>
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <fflush+0x18>)
 80023d2:	4905      	ldr	r1, [pc, #20]	; (80023e8 <fflush+0x1c>)
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	f000 b8d3 	b.w	8002580 <_fwalk_reent>
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <fflush+0x20>)
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	f7ff bfcb 	b.w	8002378 <_fflush_r>
 80023e2:	bf00      	nop
 80023e4:	08003594 	.word	0x08003594
 80023e8:	08002379 	.word	0x08002379
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <std>:
 80023f0:	2300      	movs	r3, #0
 80023f2:	b510      	push	{r4, lr}
 80023f4:	4604      	mov	r4, r0
 80023f6:	e9c0 3300 	strd	r3, r3, [r0]
 80023fa:	6083      	str	r3, [r0, #8]
 80023fc:	8181      	strh	r1, [r0, #12]
 80023fe:	6643      	str	r3, [r0, #100]	; 0x64
 8002400:	81c2      	strh	r2, [r0, #14]
 8002402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002406:	6183      	str	r3, [r0, #24]
 8002408:	4619      	mov	r1, r3
 800240a:	2208      	movs	r2, #8
 800240c:	305c      	adds	r0, #92	; 0x5c
 800240e:	f000 f90b 	bl	8002628 <memset>
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <std+0x38>)
 8002414:	6263      	str	r3, [r4, #36]	; 0x24
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <std+0x3c>)
 8002418:	62a3      	str	r3, [r4, #40]	; 0x28
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <std+0x40>)
 800241c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <std+0x44>)
 8002420:	6224      	str	r4, [r4, #32]
 8002422:	6323      	str	r3, [r4, #48]	; 0x30
 8002424:	bd10      	pop	{r4, pc}
 8002426:	bf00      	nop
 8002428:	080028a1 	.word	0x080028a1
 800242c:	080028c3 	.word	0x080028c3
 8002430:	080028fb 	.word	0x080028fb
 8002434:	0800291f 	.word	0x0800291f

08002438 <_cleanup_r>:
 8002438:	4901      	ldr	r1, [pc, #4]	; (8002440 <_cleanup_r+0x8>)
 800243a:	f000 b8a1 	b.w	8002580 <_fwalk_reent>
 800243e:	bf00      	nop
 8002440:	08002379 	.word	0x08002379

08002444 <__sfmoreglue>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	1e4a      	subs	r2, r1, #1
 8002448:	2568      	movs	r5, #104	; 0x68
 800244a:	4355      	muls	r5, r2
 800244c:	460e      	mov	r6, r1
 800244e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002452:	f000 f93f 	bl	80026d4 <_malloc_r>
 8002456:	4604      	mov	r4, r0
 8002458:	b140      	cbz	r0, 800246c <__sfmoreglue+0x28>
 800245a:	2100      	movs	r1, #0
 800245c:	e9c0 1600 	strd	r1, r6, [r0]
 8002460:	300c      	adds	r0, #12
 8002462:	60a0      	str	r0, [r4, #8]
 8002464:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002468:	f000 f8de 	bl	8002628 <memset>
 800246c:	4620      	mov	r0, r4
 800246e:	bd70      	pop	{r4, r5, r6, pc}

08002470 <__sinit>:
 8002470:	6983      	ldr	r3, [r0, #24]
 8002472:	b510      	push	{r4, lr}
 8002474:	4604      	mov	r4, r0
 8002476:	bb33      	cbnz	r3, 80024c6 <__sinit+0x56>
 8002478:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800247c:	6503      	str	r3, [r0, #80]	; 0x50
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <__sinit+0x58>)
 8002480:	4a12      	ldr	r2, [pc, #72]	; (80024cc <__sinit+0x5c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6282      	str	r2, [r0, #40]	; 0x28
 8002486:	4298      	cmp	r0, r3
 8002488:	bf04      	itt	eq
 800248a:	2301      	moveq	r3, #1
 800248c:	6183      	streq	r3, [r0, #24]
 800248e:	f000 f81f 	bl	80024d0 <__sfp>
 8002492:	6060      	str	r0, [r4, #4]
 8002494:	4620      	mov	r0, r4
 8002496:	f000 f81b 	bl	80024d0 <__sfp>
 800249a:	60a0      	str	r0, [r4, #8]
 800249c:	4620      	mov	r0, r4
 800249e:	f000 f817 	bl	80024d0 <__sfp>
 80024a2:	2200      	movs	r2, #0
 80024a4:	60e0      	str	r0, [r4, #12]
 80024a6:	2104      	movs	r1, #4
 80024a8:	6860      	ldr	r0, [r4, #4]
 80024aa:	f7ff ffa1 	bl	80023f0 <std>
 80024ae:	2201      	movs	r2, #1
 80024b0:	2109      	movs	r1, #9
 80024b2:	68a0      	ldr	r0, [r4, #8]
 80024b4:	f7ff ff9c 	bl	80023f0 <std>
 80024b8:	2202      	movs	r2, #2
 80024ba:	2112      	movs	r1, #18
 80024bc:	68e0      	ldr	r0, [r4, #12]
 80024be:	f7ff ff97 	bl	80023f0 <std>
 80024c2:	2301      	movs	r3, #1
 80024c4:	61a3      	str	r3, [r4, #24]
 80024c6:	bd10      	pop	{r4, pc}
 80024c8:	08003594 	.word	0x08003594
 80024cc:	08002439 	.word	0x08002439

080024d0 <__sfp>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <__sfp+0x70>)
 80024d4:	681e      	ldr	r6, [r3, #0]
 80024d6:	69b3      	ldr	r3, [r6, #24]
 80024d8:	4607      	mov	r7, r0
 80024da:	b913      	cbnz	r3, 80024e2 <__sfp+0x12>
 80024dc:	4630      	mov	r0, r6
 80024de:	f7ff ffc7 	bl	8002470 <__sinit>
 80024e2:	3648      	adds	r6, #72	; 0x48
 80024e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	d503      	bpl.n	80024f4 <__sfp+0x24>
 80024ec:	6833      	ldr	r3, [r6, #0]
 80024ee:	b133      	cbz	r3, 80024fe <__sfp+0x2e>
 80024f0:	6836      	ldr	r6, [r6, #0]
 80024f2:	e7f7      	b.n	80024e4 <__sfp+0x14>
 80024f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80024f8:	b16d      	cbz	r5, 8002516 <__sfp+0x46>
 80024fa:	3468      	adds	r4, #104	; 0x68
 80024fc:	e7f4      	b.n	80024e8 <__sfp+0x18>
 80024fe:	2104      	movs	r1, #4
 8002500:	4638      	mov	r0, r7
 8002502:	f7ff ff9f 	bl	8002444 <__sfmoreglue>
 8002506:	6030      	str	r0, [r6, #0]
 8002508:	2800      	cmp	r0, #0
 800250a:	d1f1      	bne.n	80024f0 <__sfp+0x20>
 800250c:	230c      	movs	r3, #12
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4604      	mov	r4, r0
 8002512:	4620      	mov	r0, r4
 8002514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <__sfp+0x74>)
 8002518:	6665      	str	r5, [r4, #100]	; 0x64
 800251a:	e9c4 5500 	strd	r5, r5, [r4]
 800251e:	60a5      	str	r5, [r4, #8]
 8002520:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002524:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002528:	2208      	movs	r2, #8
 800252a:	4629      	mov	r1, r5
 800252c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002530:	f000 f87a 	bl	8002628 <memset>
 8002534:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002538:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800253c:	e7e9      	b.n	8002512 <__sfp+0x42>
 800253e:	bf00      	nop
 8002540:	08003594 	.word	0x08003594
 8002544:	ffff0001 	.word	0xffff0001

08002548 <_fwalk>:
 8002548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800254c:	4688      	mov	r8, r1
 800254e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002552:	2600      	movs	r6, #0
 8002554:	b914      	cbnz	r4, 800255c <_fwalk+0x14>
 8002556:	4630      	mov	r0, r6
 8002558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800255c:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002560:	3f01      	subs	r7, #1
 8002562:	d501      	bpl.n	8002568 <_fwalk+0x20>
 8002564:	6824      	ldr	r4, [r4, #0]
 8002566:	e7f5      	b.n	8002554 <_fwalk+0xc>
 8002568:	89ab      	ldrh	r3, [r5, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d906      	bls.n	800257c <_fwalk+0x34>
 800256e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002572:	3301      	adds	r3, #1
 8002574:	d002      	beq.n	800257c <_fwalk+0x34>
 8002576:	4628      	mov	r0, r5
 8002578:	47c0      	blx	r8
 800257a:	4306      	orrs	r6, r0
 800257c:	3568      	adds	r5, #104	; 0x68
 800257e:	e7ef      	b.n	8002560 <_fwalk+0x18>

08002580 <_fwalk_reent>:
 8002580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002584:	4680      	mov	r8, r0
 8002586:	4689      	mov	r9, r1
 8002588:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800258c:	2600      	movs	r6, #0
 800258e:	b914      	cbnz	r4, 8002596 <_fwalk_reent+0x16>
 8002590:	4630      	mov	r0, r6
 8002592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002596:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800259a:	3f01      	subs	r7, #1
 800259c:	d501      	bpl.n	80025a2 <_fwalk_reent+0x22>
 800259e:	6824      	ldr	r4, [r4, #0]
 80025a0:	e7f5      	b.n	800258e <_fwalk_reent+0xe>
 80025a2:	89ab      	ldrh	r3, [r5, #12]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d907      	bls.n	80025b8 <_fwalk_reent+0x38>
 80025a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025ac:	3301      	adds	r3, #1
 80025ae:	d003      	beq.n	80025b8 <_fwalk_reent+0x38>
 80025b0:	4629      	mov	r1, r5
 80025b2:	4640      	mov	r0, r8
 80025b4:	47c8      	blx	r9
 80025b6:	4306      	orrs	r6, r0
 80025b8:	3568      	adds	r5, #104	; 0x68
 80025ba:	e7ee      	b.n	800259a <_fwalk_reent+0x1a>

080025bc <getchar>:
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <getchar+0x20>)
 80025be:	b510      	push	{r4, lr}
 80025c0:	681c      	ldr	r4, [r3, #0]
 80025c2:	b124      	cbz	r4, 80025ce <getchar+0x12>
 80025c4:	69a3      	ldr	r3, [r4, #24]
 80025c6:	b913      	cbnz	r3, 80025ce <getchar+0x12>
 80025c8:	4620      	mov	r0, r4
 80025ca:	f7ff ff51 	bl	8002470 <__sinit>
 80025ce:	6861      	ldr	r1, [r4, #4]
 80025d0:	4620      	mov	r0, r4
 80025d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025d6:	f000 ba89 	b.w	8002aec <_getc_r>
 80025da:	bf00      	nop
 80025dc:	2000000c 	.word	0x2000000c

080025e0 <__libc_init_array>:
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	4e0d      	ldr	r6, [pc, #52]	; (8002618 <__libc_init_array+0x38>)
 80025e4:	4c0d      	ldr	r4, [pc, #52]	; (800261c <__libc_init_array+0x3c>)
 80025e6:	1ba4      	subs	r4, r4, r6
 80025e8:	10a4      	asrs	r4, r4, #2
 80025ea:	2500      	movs	r5, #0
 80025ec:	42a5      	cmp	r5, r4
 80025ee:	d109      	bne.n	8002604 <__libc_init_array+0x24>
 80025f0:	4e0b      	ldr	r6, [pc, #44]	; (8002620 <__libc_init_array+0x40>)
 80025f2:	4c0c      	ldr	r4, [pc, #48]	; (8002624 <__libc_init_array+0x44>)
 80025f4:	f000 ff0a 	bl	800340c <_init>
 80025f8:	1ba4      	subs	r4, r4, r6
 80025fa:	10a4      	asrs	r4, r4, #2
 80025fc:	2500      	movs	r5, #0
 80025fe:	42a5      	cmp	r5, r4
 8002600:	d105      	bne.n	800260e <__libc_init_array+0x2e>
 8002602:	bd70      	pop	{r4, r5, r6, pc}
 8002604:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002608:	4798      	blx	r3
 800260a:	3501      	adds	r5, #1
 800260c:	e7ee      	b.n	80025ec <__libc_init_array+0xc>
 800260e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002612:	4798      	blx	r3
 8002614:	3501      	adds	r5, #1
 8002616:	e7f2      	b.n	80025fe <__libc_init_array+0x1e>
 8002618:	080035d4 	.word	0x080035d4
 800261c:	080035d4 	.word	0x080035d4
 8002620:	080035d4 	.word	0x080035d4
 8002624:	080035d8 	.word	0x080035d8

08002628 <memset>:
 8002628:	4402      	add	r2, r0
 800262a:	4603      	mov	r3, r0
 800262c:	4293      	cmp	r3, r2
 800262e:	d100      	bne.n	8002632 <memset+0xa>
 8002630:	4770      	bx	lr
 8002632:	f803 1b01 	strb.w	r1, [r3], #1
 8002636:	e7f9      	b.n	800262c <memset+0x4>

08002638 <_free_r>:
 8002638:	b538      	push	{r3, r4, r5, lr}
 800263a:	4605      	mov	r5, r0
 800263c:	2900      	cmp	r1, #0
 800263e:	d045      	beq.n	80026cc <_free_r+0x94>
 8002640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002644:	1f0c      	subs	r4, r1, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	bfb8      	it	lt
 800264a:	18e4      	addlt	r4, r4, r3
 800264c:	f000 faf0 	bl	8002c30 <__malloc_lock>
 8002650:	4a1f      	ldr	r2, [pc, #124]	; (80026d0 <_free_r+0x98>)
 8002652:	6813      	ldr	r3, [r2, #0]
 8002654:	4610      	mov	r0, r2
 8002656:	b933      	cbnz	r3, 8002666 <_free_r+0x2e>
 8002658:	6063      	str	r3, [r4, #4]
 800265a:	6014      	str	r4, [r2, #0]
 800265c:	4628      	mov	r0, r5
 800265e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002662:	f000 bae6 	b.w	8002c32 <__malloc_unlock>
 8002666:	42a3      	cmp	r3, r4
 8002668:	d90c      	bls.n	8002684 <_free_r+0x4c>
 800266a:	6821      	ldr	r1, [r4, #0]
 800266c:	1862      	adds	r2, r4, r1
 800266e:	4293      	cmp	r3, r2
 8002670:	bf04      	itt	eq
 8002672:	681a      	ldreq	r2, [r3, #0]
 8002674:	685b      	ldreq	r3, [r3, #4]
 8002676:	6063      	str	r3, [r4, #4]
 8002678:	bf04      	itt	eq
 800267a:	1852      	addeq	r2, r2, r1
 800267c:	6022      	streq	r2, [r4, #0]
 800267e:	6004      	str	r4, [r0, #0]
 8002680:	e7ec      	b.n	800265c <_free_r+0x24>
 8002682:	4613      	mov	r3, r2
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	b10a      	cbz	r2, 800268c <_free_r+0x54>
 8002688:	42a2      	cmp	r2, r4
 800268a:	d9fa      	bls.n	8002682 <_free_r+0x4a>
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	1858      	adds	r0, r3, r1
 8002690:	42a0      	cmp	r0, r4
 8002692:	d10b      	bne.n	80026ac <_free_r+0x74>
 8002694:	6820      	ldr	r0, [r4, #0]
 8002696:	4401      	add	r1, r0
 8002698:	1858      	adds	r0, r3, r1
 800269a:	4282      	cmp	r2, r0
 800269c:	6019      	str	r1, [r3, #0]
 800269e:	d1dd      	bne.n	800265c <_free_r+0x24>
 80026a0:	6810      	ldr	r0, [r2, #0]
 80026a2:	6852      	ldr	r2, [r2, #4]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	4401      	add	r1, r0
 80026a8:	6019      	str	r1, [r3, #0]
 80026aa:	e7d7      	b.n	800265c <_free_r+0x24>
 80026ac:	d902      	bls.n	80026b4 <_free_r+0x7c>
 80026ae:	230c      	movs	r3, #12
 80026b0:	602b      	str	r3, [r5, #0]
 80026b2:	e7d3      	b.n	800265c <_free_r+0x24>
 80026b4:	6820      	ldr	r0, [r4, #0]
 80026b6:	1821      	adds	r1, r4, r0
 80026b8:	428a      	cmp	r2, r1
 80026ba:	bf04      	itt	eq
 80026bc:	6811      	ldreq	r1, [r2, #0]
 80026be:	6852      	ldreq	r2, [r2, #4]
 80026c0:	6062      	str	r2, [r4, #4]
 80026c2:	bf04      	itt	eq
 80026c4:	1809      	addeq	r1, r1, r0
 80026c6:	6021      	streq	r1, [r4, #0]
 80026c8:	605c      	str	r4, [r3, #4]
 80026ca:	e7c7      	b.n	800265c <_free_r+0x24>
 80026cc:	bd38      	pop	{r3, r4, r5, pc}
 80026ce:	bf00      	nop
 80026d0:	2000008c 	.word	0x2000008c

080026d4 <_malloc_r>:
 80026d4:	b570      	push	{r4, r5, r6, lr}
 80026d6:	1ccd      	adds	r5, r1, #3
 80026d8:	f025 0503 	bic.w	r5, r5, #3
 80026dc:	3508      	adds	r5, #8
 80026de:	2d0c      	cmp	r5, #12
 80026e0:	bf38      	it	cc
 80026e2:	250c      	movcc	r5, #12
 80026e4:	2d00      	cmp	r5, #0
 80026e6:	4606      	mov	r6, r0
 80026e8:	db01      	blt.n	80026ee <_malloc_r+0x1a>
 80026ea:	42a9      	cmp	r1, r5
 80026ec:	d903      	bls.n	80026f6 <_malloc_r+0x22>
 80026ee:	230c      	movs	r3, #12
 80026f0:	6033      	str	r3, [r6, #0]
 80026f2:	2000      	movs	r0, #0
 80026f4:	bd70      	pop	{r4, r5, r6, pc}
 80026f6:	f000 fa9b 	bl	8002c30 <__malloc_lock>
 80026fa:	4a21      	ldr	r2, [pc, #132]	; (8002780 <_malloc_r+0xac>)
 80026fc:	6814      	ldr	r4, [r2, #0]
 80026fe:	4621      	mov	r1, r4
 8002700:	b991      	cbnz	r1, 8002728 <_malloc_r+0x54>
 8002702:	4c20      	ldr	r4, [pc, #128]	; (8002784 <_malloc_r+0xb0>)
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	b91b      	cbnz	r3, 8002710 <_malloc_r+0x3c>
 8002708:	4630      	mov	r0, r6
 800270a:	f000 f8b9 	bl	8002880 <_sbrk_r>
 800270e:	6020      	str	r0, [r4, #0]
 8002710:	4629      	mov	r1, r5
 8002712:	4630      	mov	r0, r6
 8002714:	f000 f8b4 	bl	8002880 <_sbrk_r>
 8002718:	1c43      	adds	r3, r0, #1
 800271a:	d124      	bne.n	8002766 <_malloc_r+0x92>
 800271c:	230c      	movs	r3, #12
 800271e:	6033      	str	r3, [r6, #0]
 8002720:	4630      	mov	r0, r6
 8002722:	f000 fa86 	bl	8002c32 <__malloc_unlock>
 8002726:	e7e4      	b.n	80026f2 <_malloc_r+0x1e>
 8002728:	680b      	ldr	r3, [r1, #0]
 800272a:	1b5b      	subs	r3, r3, r5
 800272c:	d418      	bmi.n	8002760 <_malloc_r+0x8c>
 800272e:	2b0b      	cmp	r3, #11
 8002730:	d90f      	bls.n	8002752 <_malloc_r+0x7e>
 8002732:	600b      	str	r3, [r1, #0]
 8002734:	50cd      	str	r5, [r1, r3]
 8002736:	18cc      	adds	r4, r1, r3
 8002738:	4630      	mov	r0, r6
 800273a:	f000 fa7a 	bl	8002c32 <__malloc_unlock>
 800273e:	f104 000b 	add.w	r0, r4, #11
 8002742:	1d23      	adds	r3, r4, #4
 8002744:	f020 0007 	bic.w	r0, r0, #7
 8002748:	1ac3      	subs	r3, r0, r3
 800274a:	d0d3      	beq.n	80026f4 <_malloc_r+0x20>
 800274c:	425a      	negs	r2, r3
 800274e:	50e2      	str	r2, [r4, r3]
 8002750:	e7d0      	b.n	80026f4 <_malloc_r+0x20>
 8002752:	428c      	cmp	r4, r1
 8002754:	684b      	ldr	r3, [r1, #4]
 8002756:	bf16      	itet	ne
 8002758:	6063      	strne	r3, [r4, #4]
 800275a:	6013      	streq	r3, [r2, #0]
 800275c:	460c      	movne	r4, r1
 800275e:	e7eb      	b.n	8002738 <_malloc_r+0x64>
 8002760:	460c      	mov	r4, r1
 8002762:	6849      	ldr	r1, [r1, #4]
 8002764:	e7cc      	b.n	8002700 <_malloc_r+0x2c>
 8002766:	1cc4      	adds	r4, r0, #3
 8002768:	f024 0403 	bic.w	r4, r4, #3
 800276c:	42a0      	cmp	r0, r4
 800276e:	d005      	beq.n	800277c <_malloc_r+0xa8>
 8002770:	1a21      	subs	r1, r4, r0
 8002772:	4630      	mov	r0, r6
 8002774:	f000 f884 	bl	8002880 <_sbrk_r>
 8002778:	3001      	adds	r0, #1
 800277a:	d0cf      	beq.n	800271c <_malloc_r+0x48>
 800277c:	6025      	str	r5, [r4, #0]
 800277e:	e7db      	b.n	8002738 <_malloc_r+0x64>
 8002780:	2000008c 	.word	0x2000008c
 8002784:	20000090 	.word	0x20000090

08002788 <iprintf>:
 8002788:	b40f      	push	{r0, r1, r2, r3}
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <iprintf+0x2c>)
 800278c:	b513      	push	{r0, r1, r4, lr}
 800278e:	681c      	ldr	r4, [r3, #0]
 8002790:	b124      	cbz	r4, 800279c <iprintf+0x14>
 8002792:	69a3      	ldr	r3, [r4, #24]
 8002794:	b913      	cbnz	r3, 800279c <iprintf+0x14>
 8002796:	4620      	mov	r0, r4
 8002798:	f7ff fe6a 	bl	8002470 <__sinit>
 800279c:	ab05      	add	r3, sp, #20
 800279e:	9a04      	ldr	r2, [sp, #16]
 80027a0:	68a1      	ldr	r1, [r4, #8]
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	4620      	mov	r0, r4
 80027a6:	f000 fa6f 	bl	8002c88 <_vfiprintf_r>
 80027aa:	b002      	add	sp, #8
 80027ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027b0:	b004      	add	sp, #16
 80027b2:	4770      	bx	lr
 80027b4:	2000000c 	.word	0x2000000c

080027b8 <_puts_r>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	460e      	mov	r6, r1
 80027bc:	4605      	mov	r5, r0
 80027be:	b118      	cbz	r0, 80027c8 <_puts_r+0x10>
 80027c0:	6983      	ldr	r3, [r0, #24]
 80027c2:	b90b      	cbnz	r3, 80027c8 <_puts_r+0x10>
 80027c4:	f7ff fe54 	bl	8002470 <__sinit>
 80027c8:	69ab      	ldr	r3, [r5, #24]
 80027ca:	68ac      	ldr	r4, [r5, #8]
 80027cc:	b913      	cbnz	r3, 80027d4 <_puts_r+0x1c>
 80027ce:	4628      	mov	r0, r5
 80027d0:	f7ff fe4e 	bl	8002470 <__sinit>
 80027d4:	4b23      	ldr	r3, [pc, #140]	; (8002864 <_puts_r+0xac>)
 80027d6:	429c      	cmp	r4, r3
 80027d8:	d117      	bne.n	800280a <_puts_r+0x52>
 80027da:	686c      	ldr	r4, [r5, #4]
 80027dc:	89a3      	ldrh	r3, [r4, #12]
 80027de:	071b      	lsls	r3, r3, #28
 80027e0:	d51d      	bpl.n	800281e <_puts_r+0x66>
 80027e2:	6923      	ldr	r3, [r4, #16]
 80027e4:	b1db      	cbz	r3, 800281e <_puts_r+0x66>
 80027e6:	3e01      	subs	r6, #1
 80027e8:	68a3      	ldr	r3, [r4, #8]
 80027ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80027ee:	3b01      	subs	r3, #1
 80027f0:	60a3      	str	r3, [r4, #8]
 80027f2:	b9e9      	cbnz	r1, 8002830 <_puts_r+0x78>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da2e      	bge.n	8002856 <_puts_r+0x9e>
 80027f8:	4622      	mov	r2, r4
 80027fa:	210a      	movs	r1, #10
 80027fc:	4628      	mov	r0, r5
 80027fe:	f000 f893 	bl	8002928 <__swbuf_r>
 8002802:	3001      	adds	r0, #1
 8002804:	d011      	beq.n	800282a <_puts_r+0x72>
 8002806:	200a      	movs	r0, #10
 8002808:	e011      	b.n	800282e <_puts_r+0x76>
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <_puts_r+0xb0>)
 800280c:	429c      	cmp	r4, r3
 800280e:	d101      	bne.n	8002814 <_puts_r+0x5c>
 8002810:	68ac      	ldr	r4, [r5, #8]
 8002812:	e7e3      	b.n	80027dc <_puts_r+0x24>
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <_puts_r+0xb4>)
 8002816:	429c      	cmp	r4, r3
 8002818:	bf08      	it	eq
 800281a:	68ec      	ldreq	r4, [r5, #12]
 800281c:	e7de      	b.n	80027dc <_puts_r+0x24>
 800281e:	4621      	mov	r1, r4
 8002820:	4628      	mov	r0, r5
 8002822:	f000 f8e5 	bl	80029f0 <__swsetup_r>
 8002826:	2800      	cmp	r0, #0
 8002828:	d0dd      	beq.n	80027e6 <_puts_r+0x2e>
 800282a:	f04f 30ff 	mov.w	r0, #4294967295
 800282e:	bd70      	pop	{r4, r5, r6, pc}
 8002830:	2b00      	cmp	r3, #0
 8002832:	da04      	bge.n	800283e <_puts_r+0x86>
 8002834:	69a2      	ldr	r2, [r4, #24]
 8002836:	429a      	cmp	r2, r3
 8002838:	dc06      	bgt.n	8002848 <_puts_r+0x90>
 800283a:	290a      	cmp	r1, #10
 800283c:	d004      	beq.n	8002848 <_puts_r+0x90>
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	6022      	str	r2, [r4, #0]
 8002844:	7019      	strb	r1, [r3, #0]
 8002846:	e7cf      	b.n	80027e8 <_puts_r+0x30>
 8002848:	4622      	mov	r2, r4
 800284a:	4628      	mov	r0, r5
 800284c:	f000 f86c 	bl	8002928 <__swbuf_r>
 8002850:	3001      	adds	r0, #1
 8002852:	d1c9      	bne.n	80027e8 <_puts_r+0x30>
 8002854:	e7e9      	b.n	800282a <_puts_r+0x72>
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	200a      	movs	r0, #10
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	6022      	str	r2, [r4, #0]
 800285e:	7018      	strb	r0, [r3, #0]
 8002860:	e7e5      	b.n	800282e <_puts_r+0x76>
 8002862:	bf00      	nop
 8002864:	08003554 	.word	0x08003554
 8002868:	08003574 	.word	0x08003574
 800286c:	08003534 	.word	0x08003534

08002870 <puts>:
 8002870:	4b02      	ldr	r3, [pc, #8]	; (800287c <puts+0xc>)
 8002872:	4601      	mov	r1, r0
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	f7ff bf9f 	b.w	80027b8 <_puts_r>
 800287a:	bf00      	nop
 800287c:	2000000c 	.word	0x2000000c

08002880 <_sbrk_r>:
 8002880:	b538      	push	{r3, r4, r5, lr}
 8002882:	4c06      	ldr	r4, [pc, #24]	; (800289c <_sbrk_r+0x1c>)
 8002884:	2300      	movs	r3, #0
 8002886:	4605      	mov	r5, r0
 8002888:	4608      	mov	r0, r1
 800288a:	6023      	str	r3, [r4, #0]
 800288c:	f000 fdb0 	bl	80033f0 <_sbrk>
 8002890:	1c43      	adds	r3, r0, #1
 8002892:	d102      	bne.n	800289a <_sbrk_r+0x1a>
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	b103      	cbz	r3, 800289a <_sbrk_r+0x1a>
 8002898:	602b      	str	r3, [r5, #0]
 800289a:	bd38      	pop	{r3, r4, r5, pc}
 800289c:	20000380 	.word	0x20000380

080028a0 <__sread>:
 80028a0:	b510      	push	{r4, lr}
 80028a2:	460c      	mov	r4, r1
 80028a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028a8:	f000 fc8c 	bl	80031c4 <_read_r>
 80028ac:	2800      	cmp	r0, #0
 80028ae:	bfab      	itete	ge
 80028b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80028b2:	89a3      	ldrhlt	r3, [r4, #12]
 80028b4:	181b      	addge	r3, r3, r0
 80028b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80028ba:	bfac      	ite	ge
 80028bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80028be:	81a3      	strhlt	r3, [r4, #12]
 80028c0:	bd10      	pop	{r4, pc}

080028c2 <__swrite>:
 80028c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028c6:	461f      	mov	r7, r3
 80028c8:	898b      	ldrh	r3, [r1, #12]
 80028ca:	05db      	lsls	r3, r3, #23
 80028cc:	4605      	mov	r5, r0
 80028ce:	460c      	mov	r4, r1
 80028d0:	4616      	mov	r6, r2
 80028d2:	d505      	bpl.n	80028e0 <__swrite+0x1e>
 80028d4:	2302      	movs	r3, #2
 80028d6:	2200      	movs	r2, #0
 80028d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028dc:	f000 f932 	bl	8002b44 <_lseek_r>
 80028e0:	89a3      	ldrh	r3, [r4, #12]
 80028e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028ea:	81a3      	strh	r3, [r4, #12]
 80028ec:	4632      	mov	r2, r6
 80028ee:	463b      	mov	r3, r7
 80028f0:	4628      	mov	r0, r5
 80028f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028f6:	f000 b869 	b.w	80029cc <_write_r>

080028fa <__sseek>:
 80028fa:	b510      	push	{r4, lr}
 80028fc:	460c      	mov	r4, r1
 80028fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002902:	f000 f91f 	bl	8002b44 <_lseek_r>
 8002906:	1c43      	adds	r3, r0, #1
 8002908:	89a3      	ldrh	r3, [r4, #12]
 800290a:	bf15      	itete	ne
 800290c:	6560      	strne	r0, [r4, #84]	; 0x54
 800290e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002916:	81a3      	strheq	r3, [r4, #12]
 8002918:	bf18      	it	ne
 800291a:	81a3      	strhne	r3, [r4, #12]
 800291c:	bd10      	pop	{r4, pc}

0800291e <__sclose>:
 800291e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002922:	f000 b8d3 	b.w	8002acc <_close_r>
	...

08002928 <__swbuf_r>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	460e      	mov	r6, r1
 800292c:	4614      	mov	r4, r2
 800292e:	4605      	mov	r5, r0
 8002930:	b118      	cbz	r0, 800293a <__swbuf_r+0x12>
 8002932:	6983      	ldr	r3, [r0, #24]
 8002934:	b90b      	cbnz	r3, 800293a <__swbuf_r+0x12>
 8002936:	f7ff fd9b 	bl	8002470 <__sinit>
 800293a:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <__swbuf_r+0x98>)
 800293c:	429c      	cmp	r4, r3
 800293e:	d12a      	bne.n	8002996 <__swbuf_r+0x6e>
 8002940:	686c      	ldr	r4, [r5, #4]
 8002942:	69a3      	ldr	r3, [r4, #24]
 8002944:	60a3      	str	r3, [r4, #8]
 8002946:	89a3      	ldrh	r3, [r4, #12]
 8002948:	071a      	lsls	r2, r3, #28
 800294a:	d52e      	bpl.n	80029aa <__swbuf_r+0x82>
 800294c:	6923      	ldr	r3, [r4, #16]
 800294e:	b363      	cbz	r3, 80029aa <__swbuf_r+0x82>
 8002950:	6923      	ldr	r3, [r4, #16]
 8002952:	6820      	ldr	r0, [r4, #0]
 8002954:	1ac0      	subs	r0, r0, r3
 8002956:	6963      	ldr	r3, [r4, #20]
 8002958:	b2f6      	uxtb	r6, r6
 800295a:	4283      	cmp	r3, r0
 800295c:	4637      	mov	r7, r6
 800295e:	dc04      	bgt.n	800296a <__swbuf_r+0x42>
 8002960:	4621      	mov	r1, r4
 8002962:	4628      	mov	r0, r5
 8002964:	f7ff fd08 	bl	8002378 <_fflush_r>
 8002968:	bb28      	cbnz	r0, 80029b6 <__swbuf_r+0x8e>
 800296a:	68a3      	ldr	r3, [r4, #8]
 800296c:	3b01      	subs	r3, #1
 800296e:	60a3      	str	r3, [r4, #8]
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	6022      	str	r2, [r4, #0]
 8002976:	701e      	strb	r6, [r3, #0]
 8002978:	6963      	ldr	r3, [r4, #20]
 800297a:	3001      	adds	r0, #1
 800297c:	4283      	cmp	r3, r0
 800297e:	d004      	beq.n	800298a <__swbuf_r+0x62>
 8002980:	89a3      	ldrh	r3, [r4, #12]
 8002982:	07db      	lsls	r3, r3, #31
 8002984:	d519      	bpl.n	80029ba <__swbuf_r+0x92>
 8002986:	2e0a      	cmp	r6, #10
 8002988:	d117      	bne.n	80029ba <__swbuf_r+0x92>
 800298a:	4621      	mov	r1, r4
 800298c:	4628      	mov	r0, r5
 800298e:	f7ff fcf3 	bl	8002378 <_fflush_r>
 8002992:	b190      	cbz	r0, 80029ba <__swbuf_r+0x92>
 8002994:	e00f      	b.n	80029b6 <__swbuf_r+0x8e>
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <__swbuf_r+0x9c>)
 8002998:	429c      	cmp	r4, r3
 800299a:	d101      	bne.n	80029a0 <__swbuf_r+0x78>
 800299c:	68ac      	ldr	r4, [r5, #8]
 800299e:	e7d0      	b.n	8002942 <__swbuf_r+0x1a>
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <__swbuf_r+0xa0>)
 80029a2:	429c      	cmp	r4, r3
 80029a4:	bf08      	it	eq
 80029a6:	68ec      	ldreq	r4, [r5, #12]
 80029a8:	e7cb      	b.n	8002942 <__swbuf_r+0x1a>
 80029aa:	4621      	mov	r1, r4
 80029ac:	4628      	mov	r0, r5
 80029ae:	f000 f81f 	bl	80029f0 <__swsetup_r>
 80029b2:	2800      	cmp	r0, #0
 80029b4:	d0cc      	beq.n	8002950 <__swbuf_r+0x28>
 80029b6:	f04f 37ff 	mov.w	r7, #4294967295
 80029ba:	4638      	mov	r0, r7
 80029bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029be:	bf00      	nop
 80029c0:	08003554 	.word	0x08003554
 80029c4:	08003574 	.word	0x08003574
 80029c8:	08003534 	.word	0x08003534

080029cc <_write_r>:
 80029cc:	b538      	push	{r3, r4, r5, lr}
 80029ce:	4c07      	ldr	r4, [pc, #28]	; (80029ec <_write_r+0x20>)
 80029d0:	4605      	mov	r5, r0
 80029d2:	4608      	mov	r0, r1
 80029d4:	4611      	mov	r1, r2
 80029d6:	2200      	movs	r2, #0
 80029d8:	6022      	str	r2, [r4, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	f7fe f8b0 	bl	8000b40 <_write>
 80029e0:	1c43      	adds	r3, r0, #1
 80029e2:	d102      	bne.n	80029ea <_write_r+0x1e>
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	b103      	cbz	r3, 80029ea <_write_r+0x1e>
 80029e8:	602b      	str	r3, [r5, #0]
 80029ea:	bd38      	pop	{r3, r4, r5, pc}
 80029ec:	20000380 	.word	0x20000380

080029f0 <__swsetup_r>:
 80029f0:	4b32      	ldr	r3, [pc, #200]	; (8002abc <__swsetup_r+0xcc>)
 80029f2:	b570      	push	{r4, r5, r6, lr}
 80029f4:	681d      	ldr	r5, [r3, #0]
 80029f6:	4606      	mov	r6, r0
 80029f8:	460c      	mov	r4, r1
 80029fa:	b125      	cbz	r5, 8002a06 <__swsetup_r+0x16>
 80029fc:	69ab      	ldr	r3, [r5, #24]
 80029fe:	b913      	cbnz	r3, 8002a06 <__swsetup_r+0x16>
 8002a00:	4628      	mov	r0, r5
 8002a02:	f7ff fd35 	bl	8002470 <__sinit>
 8002a06:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <__swsetup_r+0xd0>)
 8002a08:	429c      	cmp	r4, r3
 8002a0a:	d10f      	bne.n	8002a2c <__swsetup_r+0x3c>
 8002a0c:	686c      	ldr	r4, [r5, #4]
 8002a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	0715      	lsls	r5, r2, #28
 8002a16:	d42c      	bmi.n	8002a72 <__swsetup_r+0x82>
 8002a18:	06d0      	lsls	r0, r2, #27
 8002a1a:	d411      	bmi.n	8002a40 <__swsetup_r+0x50>
 8002a1c:	2209      	movs	r2, #9
 8002a1e:	6032      	str	r2, [r6, #0]
 8002a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a24:	81a3      	strh	r3, [r4, #12]
 8002a26:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2a:	e03e      	b.n	8002aaa <__swsetup_r+0xba>
 8002a2c:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <__swsetup_r+0xd4>)
 8002a2e:	429c      	cmp	r4, r3
 8002a30:	d101      	bne.n	8002a36 <__swsetup_r+0x46>
 8002a32:	68ac      	ldr	r4, [r5, #8]
 8002a34:	e7eb      	b.n	8002a0e <__swsetup_r+0x1e>
 8002a36:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <__swsetup_r+0xd8>)
 8002a38:	429c      	cmp	r4, r3
 8002a3a:	bf08      	it	eq
 8002a3c:	68ec      	ldreq	r4, [r5, #12]
 8002a3e:	e7e6      	b.n	8002a0e <__swsetup_r+0x1e>
 8002a40:	0751      	lsls	r1, r2, #29
 8002a42:	d512      	bpl.n	8002a6a <__swsetup_r+0x7a>
 8002a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a46:	b141      	cbz	r1, 8002a5a <__swsetup_r+0x6a>
 8002a48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a4c:	4299      	cmp	r1, r3
 8002a4e:	d002      	beq.n	8002a56 <__swsetup_r+0x66>
 8002a50:	4630      	mov	r0, r6
 8002a52:	f7ff fdf1 	bl	8002638 <_free_r>
 8002a56:	2300      	movs	r3, #0
 8002a58:	6363      	str	r3, [r4, #52]	; 0x34
 8002a5a:	89a3      	ldrh	r3, [r4, #12]
 8002a5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002a60:	81a3      	strh	r3, [r4, #12]
 8002a62:	2300      	movs	r3, #0
 8002a64:	6063      	str	r3, [r4, #4]
 8002a66:	6923      	ldr	r3, [r4, #16]
 8002a68:	6023      	str	r3, [r4, #0]
 8002a6a:	89a3      	ldrh	r3, [r4, #12]
 8002a6c:	f043 0308 	orr.w	r3, r3, #8
 8002a70:	81a3      	strh	r3, [r4, #12]
 8002a72:	6923      	ldr	r3, [r4, #16]
 8002a74:	b94b      	cbnz	r3, 8002a8a <__swsetup_r+0x9a>
 8002a76:	89a3      	ldrh	r3, [r4, #12]
 8002a78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a80:	d003      	beq.n	8002a8a <__swsetup_r+0x9a>
 8002a82:	4621      	mov	r1, r4
 8002a84:	4630      	mov	r0, r6
 8002a86:	f000 f893 	bl	8002bb0 <__smakebuf_r>
 8002a8a:	89a2      	ldrh	r2, [r4, #12]
 8002a8c:	f012 0301 	ands.w	r3, r2, #1
 8002a90:	d00c      	beq.n	8002aac <__swsetup_r+0xbc>
 8002a92:	2300      	movs	r3, #0
 8002a94:	60a3      	str	r3, [r4, #8]
 8002a96:	6963      	ldr	r3, [r4, #20]
 8002a98:	425b      	negs	r3, r3
 8002a9a:	61a3      	str	r3, [r4, #24]
 8002a9c:	6923      	ldr	r3, [r4, #16]
 8002a9e:	b953      	cbnz	r3, 8002ab6 <__swsetup_r+0xc6>
 8002aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aa4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002aa8:	d1ba      	bne.n	8002a20 <__swsetup_r+0x30>
 8002aaa:	bd70      	pop	{r4, r5, r6, pc}
 8002aac:	0792      	lsls	r2, r2, #30
 8002aae:	bf58      	it	pl
 8002ab0:	6963      	ldrpl	r3, [r4, #20]
 8002ab2:	60a3      	str	r3, [r4, #8]
 8002ab4:	e7f2      	b.n	8002a9c <__swsetup_r+0xac>
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	e7f7      	b.n	8002aaa <__swsetup_r+0xba>
 8002aba:	bf00      	nop
 8002abc:	2000000c 	.word	0x2000000c
 8002ac0:	08003554 	.word	0x08003554
 8002ac4:	08003574 	.word	0x08003574
 8002ac8:	08003534 	.word	0x08003534

08002acc <_close_r>:
 8002acc:	b538      	push	{r3, r4, r5, lr}
 8002ace:	4c06      	ldr	r4, [pc, #24]	; (8002ae8 <_close_r+0x1c>)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	4605      	mov	r5, r0
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	6023      	str	r3, [r4, #0]
 8002ad8:	f000 fc6a 	bl	80033b0 <_close>
 8002adc:	1c43      	adds	r3, r0, #1
 8002ade:	d102      	bne.n	8002ae6 <_close_r+0x1a>
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	b103      	cbz	r3, 8002ae6 <_close_r+0x1a>
 8002ae4:	602b      	str	r3, [r5, #0]
 8002ae6:	bd38      	pop	{r3, r4, r5, pc}
 8002ae8:	20000380 	.word	0x20000380

08002aec <_getc_r>:
 8002aec:	b538      	push	{r3, r4, r5, lr}
 8002aee:	460c      	mov	r4, r1
 8002af0:	4605      	mov	r5, r0
 8002af2:	b118      	cbz	r0, 8002afc <_getc_r+0x10>
 8002af4:	6983      	ldr	r3, [r0, #24]
 8002af6:	b90b      	cbnz	r3, 8002afc <_getc_r+0x10>
 8002af8:	f7ff fcba 	bl	8002470 <__sinit>
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <_getc_r+0x4c>)
 8002afe:	429c      	cmp	r4, r3
 8002b00:	d10b      	bne.n	8002b1a <_getc_r+0x2e>
 8002b02:	686c      	ldr	r4, [r5, #4]
 8002b04:	6863      	ldr	r3, [r4, #4]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	6063      	str	r3, [r4, #4]
 8002b0c:	da0f      	bge.n	8002b2e <_getc_r+0x42>
 8002b0e:	4621      	mov	r1, r4
 8002b10:	4628      	mov	r0, r5
 8002b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b16:	f000 bb67 	b.w	80031e8 <__srget_r>
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <_getc_r+0x50>)
 8002b1c:	429c      	cmp	r4, r3
 8002b1e:	d101      	bne.n	8002b24 <_getc_r+0x38>
 8002b20:	68ac      	ldr	r4, [r5, #8]
 8002b22:	e7ef      	b.n	8002b04 <_getc_r+0x18>
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <_getc_r+0x54>)
 8002b26:	429c      	cmp	r4, r3
 8002b28:	bf08      	it	eq
 8002b2a:	68ec      	ldreq	r4, [r5, #12]
 8002b2c:	e7ea      	b.n	8002b04 <_getc_r+0x18>
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	6022      	str	r2, [r4, #0]
 8002b34:	7818      	ldrb	r0, [r3, #0]
 8002b36:	bd38      	pop	{r3, r4, r5, pc}
 8002b38:	08003554 	.word	0x08003554
 8002b3c:	08003574 	.word	0x08003574
 8002b40:	08003534 	.word	0x08003534

08002b44 <_lseek_r>:
 8002b44:	b538      	push	{r3, r4, r5, lr}
 8002b46:	4c07      	ldr	r4, [pc, #28]	; (8002b64 <_lseek_r+0x20>)
 8002b48:	4605      	mov	r5, r0
 8002b4a:	4608      	mov	r0, r1
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	2200      	movs	r2, #0
 8002b50:	6022      	str	r2, [r4, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	f000 fc44 	bl	80033e0 <_lseek>
 8002b58:	1c43      	adds	r3, r0, #1
 8002b5a:	d102      	bne.n	8002b62 <_lseek_r+0x1e>
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	b103      	cbz	r3, 8002b62 <_lseek_r+0x1e>
 8002b60:	602b      	str	r3, [r5, #0]
 8002b62:	bd38      	pop	{r3, r4, r5, pc}
 8002b64:	20000380 	.word	0x20000380

08002b68 <__swhatbuf_r>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	460e      	mov	r6, r1
 8002b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b70:	2900      	cmp	r1, #0
 8002b72:	b096      	sub	sp, #88	; 0x58
 8002b74:	4614      	mov	r4, r2
 8002b76:	461d      	mov	r5, r3
 8002b78:	da07      	bge.n	8002b8a <__swhatbuf_r+0x22>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	602b      	str	r3, [r5, #0]
 8002b7e:	89b3      	ldrh	r3, [r6, #12]
 8002b80:	061a      	lsls	r2, r3, #24
 8002b82:	d410      	bmi.n	8002ba6 <__swhatbuf_r+0x3e>
 8002b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b88:	e00e      	b.n	8002ba8 <__swhatbuf_r+0x40>
 8002b8a:	466a      	mov	r2, sp
 8002b8c:	f000 fb58 	bl	8003240 <_fstat_r>
 8002b90:	2800      	cmp	r0, #0
 8002b92:	dbf2      	blt.n	8002b7a <__swhatbuf_r+0x12>
 8002b94:	9a01      	ldr	r2, [sp, #4]
 8002b96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b9e:	425a      	negs	r2, r3
 8002ba0:	415a      	adcs	r2, r3
 8002ba2:	602a      	str	r2, [r5, #0]
 8002ba4:	e7ee      	b.n	8002b84 <__swhatbuf_r+0x1c>
 8002ba6:	2340      	movs	r3, #64	; 0x40
 8002ba8:	2000      	movs	r0, #0
 8002baa:	6023      	str	r3, [r4, #0]
 8002bac:	b016      	add	sp, #88	; 0x58
 8002bae:	bd70      	pop	{r4, r5, r6, pc}

08002bb0 <__smakebuf_r>:
 8002bb0:	898b      	ldrh	r3, [r1, #12]
 8002bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bb4:	079d      	lsls	r5, r3, #30
 8002bb6:	4606      	mov	r6, r0
 8002bb8:	460c      	mov	r4, r1
 8002bba:	d507      	bpl.n	8002bcc <__smakebuf_r+0x1c>
 8002bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bc0:	6023      	str	r3, [r4, #0]
 8002bc2:	6123      	str	r3, [r4, #16]
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	6163      	str	r3, [r4, #20]
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
 8002bcc:	ab01      	add	r3, sp, #4
 8002bce:	466a      	mov	r2, sp
 8002bd0:	f7ff ffca 	bl	8002b68 <__swhatbuf_r>
 8002bd4:	9900      	ldr	r1, [sp, #0]
 8002bd6:	4605      	mov	r5, r0
 8002bd8:	4630      	mov	r0, r6
 8002bda:	f7ff fd7b 	bl	80026d4 <_malloc_r>
 8002bde:	b948      	cbnz	r0, 8002bf4 <__smakebuf_r+0x44>
 8002be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002be4:	059a      	lsls	r2, r3, #22
 8002be6:	d4ef      	bmi.n	8002bc8 <__smakebuf_r+0x18>
 8002be8:	f023 0303 	bic.w	r3, r3, #3
 8002bec:	f043 0302 	orr.w	r3, r3, #2
 8002bf0:	81a3      	strh	r3, [r4, #12]
 8002bf2:	e7e3      	b.n	8002bbc <__smakebuf_r+0xc>
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <__smakebuf_r+0x7c>)
 8002bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8002bf8:	89a3      	ldrh	r3, [r4, #12]
 8002bfa:	6020      	str	r0, [r4, #0]
 8002bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c00:	81a3      	strh	r3, [r4, #12]
 8002c02:	9b00      	ldr	r3, [sp, #0]
 8002c04:	6163      	str	r3, [r4, #20]
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	6120      	str	r0, [r4, #16]
 8002c0a:	b15b      	cbz	r3, 8002c24 <__smakebuf_r+0x74>
 8002c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c10:	4630      	mov	r0, r6
 8002c12:	f000 fb27 	bl	8003264 <_isatty_r>
 8002c16:	b128      	cbz	r0, 8002c24 <__smakebuf_r+0x74>
 8002c18:	89a3      	ldrh	r3, [r4, #12]
 8002c1a:	f023 0303 	bic.w	r3, r3, #3
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	81a3      	strh	r3, [r4, #12]
 8002c24:	89a3      	ldrh	r3, [r4, #12]
 8002c26:	431d      	orrs	r5, r3
 8002c28:	81a5      	strh	r5, [r4, #12]
 8002c2a:	e7cd      	b.n	8002bc8 <__smakebuf_r+0x18>
 8002c2c:	08002439 	.word	0x08002439

08002c30 <__malloc_lock>:
 8002c30:	4770      	bx	lr

08002c32 <__malloc_unlock>:
 8002c32:	4770      	bx	lr

08002c34 <__sfputc_r>:
 8002c34:	6893      	ldr	r3, [r2, #8]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	b410      	push	{r4}
 8002c3c:	6093      	str	r3, [r2, #8]
 8002c3e:	da08      	bge.n	8002c52 <__sfputc_r+0x1e>
 8002c40:	6994      	ldr	r4, [r2, #24]
 8002c42:	42a3      	cmp	r3, r4
 8002c44:	db01      	blt.n	8002c4a <__sfputc_r+0x16>
 8002c46:	290a      	cmp	r1, #10
 8002c48:	d103      	bne.n	8002c52 <__sfputc_r+0x1e>
 8002c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c4e:	f7ff be6b 	b.w	8002928 <__swbuf_r>
 8002c52:	6813      	ldr	r3, [r2, #0]
 8002c54:	1c58      	adds	r0, r3, #1
 8002c56:	6010      	str	r0, [r2, #0]
 8002c58:	7019      	strb	r1, [r3, #0]
 8002c5a:	4608      	mov	r0, r1
 8002c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <__sfputs_r>:
 8002c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c64:	4606      	mov	r6, r0
 8002c66:	460f      	mov	r7, r1
 8002c68:	4614      	mov	r4, r2
 8002c6a:	18d5      	adds	r5, r2, r3
 8002c6c:	42ac      	cmp	r4, r5
 8002c6e:	d101      	bne.n	8002c74 <__sfputs_r+0x12>
 8002c70:	2000      	movs	r0, #0
 8002c72:	e007      	b.n	8002c84 <__sfputs_r+0x22>
 8002c74:	463a      	mov	r2, r7
 8002c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	f7ff ffda 	bl	8002c34 <__sfputc_r>
 8002c80:	1c43      	adds	r3, r0, #1
 8002c82:	d1f3      	bne.n	8002c6c <__sfputs_r+0xa>
 8002c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c88 <_vfiprintf_r>:
 8002c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c8c:	460c      	mov	r4, r1
 8002c8e:	b09d      	sub	sp, #116	; 0x74
 8002c90:	4617      	mov	r7, r2
 8002c92:	461d      	mov	r5, r3
 8002c94:	4606      	mov	r6, r0
 8002c96:	b118      	cbz	r0, 8002ca0 <_vfiprintf_r+0x18>
 8002c98:	6983      	ldr	r3, [r0, #24]
 8002c9a:	b90b      	cbnz	r3, 8002ca0 <_vfiprintf_r+0x18>
 8002c9c:	f7ff fbe8 	bl	8002470 <__sinit>
 8002ca0:	4b7c      	ldr	r3, [pc, #496]	; (8002e94 <_vfiprintf_r+0x20c>)
 8002ca2:	429c      	cmp	r4, r3
 8002ca4:	d158      	bne.n	8002d58 <_vfiprintf_r+0xd0>
 8002ca6:	6874      	ldr	r4, [r6, #4]
 8002ca8:	89a3      	ldrh	r3, [r4, #12]
 8002caa:	0718      	lsls	r0, r3, #28
 8002cac:	d55e      	bpl.n	8002d6c <_vfiprintf_r+0xe4>
 8002cae:	6923      	ldr	r3, [r4, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d05b      	beq.n	8002d6c <_vfiprintf_r+0xe4>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8002cb8:	2320      	movs	r3, #32
 8002cba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cbe:	2330      	movs	r3, #48	; 0x30
 8002cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cc4:	9503      	str	r5, [sp, #12]
 8002cc6:	f04f 0b01 	mov.w	fp, #1
 8002cca:	46b8      	mov	r8, r7
 8002ccc:	4645      	mov	r5, r8
 8002cce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002cd2:	b10b      	cbz	r3, 8002cd8 <_vfiprintf_r+0x50>
 8002cd4:	2b25      	cmp	r3, #37	; 0x25
 8002cd6:	d154      	bne.n	8002d82 <_vfiprintf_r+0xfa>
 8002cd8:	ebb8 0a07 	subs.w	sl, r8, r7
 8002cdc:	d00b      	beq.n	8002cf6 <_vfiprintf_r+0x6e>
 8002cde:	4653      	mov	r3, sl
 8002ce0:	463a      	mov	r2, r7
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	f7ff ffbc 	bl	8002c62 <__sfputs_r>
 8002cea:	3001      	adds	r0, #1
 8002cec:	f000 80c2 	beq.w	8002e74 <_vfiprintf_r+0x1ec>
 8002cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cf2:	4453      	add	r3, sl
 8002cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8002cf6:	f898 3000 	ldrb.w	r3, [r8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80ba 	beq.w	8002e74 <_vfiprintf_r+0x1ec>
 8002d00:	2300      	movs	r3, #0
 8002d02:	f04f 32ff 	mov.w	r2, #4294967295
 8002d06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d0a:	9304      	str	r3, [sp, #16]
 8002d0c:	9307      	str	r3, [sp, #28]
 8002d0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d12:	931a      	str	r3, [sp, #104]	; 0x68
 8002d14:	46a8      	mov	r8, r5
 8002d16:	2205      	movs	r2, #5
 8002d18:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002d1c:	485e      	ldr	r0, [pc, #376]	; (8002e98 <_vfiprintf_r+0x210>)
 8002d1e:	f7fd fa8f 	bl	8000240 <memchr>
 8002d22:	9b04      	ldr	r3, [sp, #16]
 8002d24:	bb78      	cbnz	r0, 8002d86 <_vfiprintf_r+0xfe>
 8002d26:	06d9      	lsls	r1, r3, #27
 8002d28:	bf44      	itt	mi
 8002d2a:	2220      	movmi	r2, #32
 8002d2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d30:	071a      	lsls	r2, r3, #28
 8002d32:	bf44      	itt	mi
 8002d34:	222b      	movmi	r2, #43	; 0x2b
 8002d36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d3a:	782a      	ldrb	r2, [r5, #0]
 8002d3c:	2a2a      	cmp	r2, #42	; 0x2a
 8002d3e:	d02a      	beq.n	8002d96 <_vfiprintf_r+0x10e>
 8002d40:	9a07      	ldr	r2, [sp, #28]
 8002d42:	46a8      	mov	r8, r5
 8002d44:	2000      	movs	r0, #0
 8002d46:	250a      	movs	r5, #10
 8002d48:	4641      	mov	r1, r8
 8002d4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d4e:	3b30      	subs	r3, #48	; 0x30
 8002d50:	2b09      	cmp	r3, #9
 8002d52:	d969      	bls.n	8002e28 <_vfiprintf_r+0x1a0>
 8002d54:	b360      	cbz	r0, 8002db0 <_vfiprintf_r+0x128>
 8002d56:	e024      	b.n	8002da2 <_vfiprintf_r+0x11a>
 8002d58:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <_vfiprintf_r+0x214>)
 8002d5a:	429c      	cmp	r4, r3
 8002d5c:	d101      	bne.n	8002d62 <_vfiprintf_r+0xda>
 8002d5e:	68b4      	ldr	r4, [r6, #8]
 8002d60:	e7a2      	b.n	8002ca8 <_vfiprintf_r+0x20>
 8002d62:	4b4f      	ldr	r3, [pc, #316]	; (8002ea0 <_vfiprintf_r+0x218>)
 8002d64:	429c      	cmp	r4, r3
 8002d66:	bf08      	it	eq
 8002d68:	68f4      	ldreq	r4, [r6, #12]
 8002d6a:	e79d      	b.n	8002ca8 <_vfiprintf_r+0x20>
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	4630      	mov	r0, r6
 8002d70:	f7ff fe3e 	bl	80029f0 <__swsetup_r>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d09d      	beq.n	8002cb4 <_vfiprintf_r+0x2c>
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	b01d      	add	sp, #116	; 0x74
 8002d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d82:	46a8      	mov	r8, r5
 8002d84:	e7a2      	b.n	8002ccc <_vfiprintf_r+0x44>
 8002d86:	4a44      	ldr	r2, [pc, #272]	; (8002e98 <_vfiprintf_r+0x210>)
 8002d88:	1a80      	subs	r0, r0, r2
 8002d8a:	fa0b f000 	lsl.w	r0, fp, r0
 8002d8e:	4318      	orrs	r0, r3
 8002d90:	9004      	str	r0, [sp, #16]
 8002d92:	4645      	mov	r5, r8
 8002d94:	e7be      	b.n	8002d14 <_vfiprintf_r+0x8c>
 8002d96:	9a03      	ldr	r2, [sp, #12]
 8002d98:	1d11      	adds	r1, r2, #4
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	9103      	str	r1, [sp, #12]
 8002d9e:	2a00      	cmp	r2, #0
 8002da0:	db01      	blt.n	8002da6 <_vfiprintf_r+0x11e>
 8002da2:	9207      	str	r2, [sp, #28]
 8002da4:	e004      	b.n	8002db0 <_vfiprintf_r+0x128>
 8002da6:	4252      	negs	r2, r2
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	9207      	str	r2, [sp, #28]
 8002dae:	9304      	str	r3, [sp, #16]
 8002db0:	f898 3000 	ldrb.w	r3, [r8]
 8002db4:	2b2e      	cmp	r3, #46	; 0x2e
 8002db6:	d10e      	bne.n	8002dd6 <_vfiprintf_r+0x14e>
 8002db8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8002dbe:	d138      	bne.n	8002e32 <_vfiprintf_r+0x1aa>
 8002dc0:	9b03      	ldr	r3, [sp, #12]
 8002dc2:	1d1a      	adds	r2, r3, #4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	9203      	str	r2, [sp, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bfb8      	it	lt
 8002dcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8002dd0:	f108 0802 	add.w	r8, r8, #2
 8002dd4:	9305      	str	r3, [sp, #20]
 8002dd6:	4d33      	ldr	r5, [pc, #204]	; (8002ea4 <_vfiprintf_r+0x21c>)
 8002dd8:	f898 1000 	ldrb.w	r1, [r8]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	4628      	mov	r0, r5
 8002de0:	f7fd fa2e 	bl	8000240 <memchr>
 8002de4:	b140      	cbz	r0, 8002df8 <_vfiprintf_r+0x170>
 8002de6:	2340      	movs	r3, #64	; 0x40
 8002de8:	1b40      	subs	r0, r0, r5
 8002dea:	fa03 f000 	lsl.w	r0, r3, r0
 8002dee:	9b04      	ldr	r3, [sp, #16]
 8002df0:	4303      	orrs	r3, r0
 8002df2:	f108 0801 	add.w	r8, r8, #1
 8002df6:	9304      	str	r3, [sp, #16]
 8002df8:	f898 1000 	ldrb.w	r1, [r8]
 8002dfc:	482a      	ldr	r0, [pc, #168]	; (8002ea8 <_vfiprintf_r+0x220>)
 8002dfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e02:	2206      	movs	r2, #6
 8002e04:	f108 0701 	add.w	r7, r8, #1
 8002e08:	f7fd fa1a 	bl	8000240 <memchr>
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	d037      	beq.n	8002e80 <_vfiprintf_r+0x1f8>
 8002e10:	4b26      	ldr	r3, [pc, #152]	; (8002eac <_vfiprintf_r+0x224>)
 8002e12:	bb1b      	cbnz	r3, 8002e5c <_vfiprintf_r+0x1d4>
 8002e14:	9b03      	ldr	r3, [sp, #12]
 8002e16:	3307      	adds	r3, #7
 8002e18:	f023 0307 	bic.w	r3, r3, #7
 8002e1c:	3308      	adds	r3, #8
 8002e1e:	9303      	str	r3, [sp, #12]
 8002e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e22:	444b      	add	r3, r9
 8002e24:	9309      	str	r3, [sp, #36]	; 0x24
 8002e26:	e750      	b.n	8002cca <_vfiprintf_r+0x42>
 8002e28:	fb05 3202 	mla	r2, r5, r2, r3
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	4688      	mov	r8, r1
 8002e30:	e78a      	b.n	8002d48 <_vfiprintf_r+0xc0>
 8002e32:	2300      	movs	r3, #0
 8002e34:	f108 0801 	add.w	r8, r8, #1
 8002e38:	9305      	str	r3, [sp, #20]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	250a      	movs	r5, #10
 8002e3e:	4640      	mov	r0, r8
 8002e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e44:	3a30      	subs	r2, #48	; 0x30
 8002e46:	2a09      	cmp	r2, #9
 8002e48:	d903      	bls.n	8002e52 <_vfiprintf_r+0x1ca>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0c3      	beq.n	8002dd6 <_vfiprintf_r+0x14e>
 8002e4e:	9105      	str	r1, [sp, #20]
 8002e50:	e7c1      	b.n	8002dd6 <_vfiprintf_r+0x14e>
 8002e52:	fb05 2101 	mla	r1, r5, r1, r2
 8002e56:	2301      	movs	r3, #1
 8002e58:	4680      	mov	r8, r0
 8002e5a:	e7f0      	b.n	8002e3e <_vfiprintf_r+0x1b6>
 8002e5c:	ab03      	add	r3, sp, #12
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	4622      	mov	r2, r4
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <_vfiprintf_r+0x228>)
 8002e64:	a904      	add	r1, sp, #16
 8002e66:	4630      	mov	r0, r6
 8002e68:	f3af 8000 	nop.w
 8002e6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002e70:	4681      	mov	r9, r0
 8002e72:	d1d5      	bne.n	8002e20 <_vfiprintf_r+0x198>
 8002e74:	89a3      	ldrh	r3, [r4, #12]
 8002e76:	065b      	lsls	r3, r3, #25
 8002e78:	f53f af7e 	bmi.w	8002d78 <_vfiprintf_r+0xf0>
 8002e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e7e:	e77d      	b.n	8002d7c <_vfiprintf_r+0xf4>
 8002e80:	ab03      	add	r3, sp, #12
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	4622      	mov	r2, r4
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <_vfiprintf_r+0x228>)
 8002e88:	a904      	add	r1, sp, #16
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	f000 f888 	bl	8002fa0 <_printf_i>
 8002e90:	e7ec      	b.n	8002e6c <_vfiprintf_r+0x1e4>
 8002e92:	bf00      	nop
 8002e94:	08003554 	.word	0x08003554
 8002e98:	08003598 	.word	0x08003598
 8002e9c:	08003574 	.word	0x08003574
 8002ea0:	08003534 	.word	0x08003534
 8002ea4:	0800359e 	.word	0x0800359e
 8002ea8:	080035a2 	.word	0x080035a2
 8002eac:	00000000 	.word	0x00000000
 8002eb0:	08002c63 	.word	0x08002c63

08002eb4 <_printf_common>:
 8002eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb8:	4691      	mov	r9, r2
 8002eba:	461f      	mov	r7, r3
 8002ebc:	688a      	ldr	r2, [r1, #8]
 8002ebe:	690b      	ldr	r3, [r1, #16]
 8002ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	bfb8      	it	lt
 8002ec8:	4613      	movlt	r3, r2
 8002eca:	f8c9 3000 	str.w	r3, [r9]
 8002ece:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ed2:	4606      	mov	r6, r0
 8002ed4:	460c      	mov	r4, r1
 8002ed6:	b112      	cbz	r2, 8002ede <_printf_common+0x2a>
 8002ed8:	3301      	adds	r3, #1
 8002eda:	f8c9 3000 	str.w	r3, [r9]
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	0699      	lsls	r1, r3, #26
 8002ee2:	bf42      	ittt	mi
 8002ee4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ee8:	3302      	addmi	r3, #2
 8002eea:	f8c9 3000 	strmi.w	r3, [r9]
 8002eee:	6825      	ldr	r5, [r4, #0]
 8002ef0:	f015 0506 	ands.w	r5, r5, #6
 8002ef4:	d107      	bne.n	8002f06 <_printf_common+0x52>
 8002ef6:	f104 0a19 	add.w	sl, r4, #25
 8002efa:	68e3      	ldr	r3, [r4, #12]
 8002efc:	f8d9 2000 	ldr.w	r2, [r9]
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	42ab      	cmp	r3, r5
 8002f04:	dc28      	bgt.n	8002f58 <_printf_common+0xa4>
 8002f06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f0a:	6822      	ldr	r2, [r4, #0]
 8002f0c:	3300      	adds	r3, #0
 8002f0e:	bf18      	it	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	0692      	lsls	r2, r2, #26
 8002f14:	d42d      	bmi.n	8002f72 <_printf_common+0xbe>
 8002f16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f1a:	4639      	mov	r1, r7
 8002f1c:	4630      	mov	r0, r6
 8002f1e:	47c0      	blx	r8
 8002f20:	3001      	adds	r0, #1
 8002f22:	d020      	beq.n	8002f66 <_printf_common+0xb2>
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	68e5      	ldr	r5, [r4, #12]
 8002f28:	f8d9 2000 	ldr.w	r2, [r9]
 8002f2c:	f003 0306 	and.w	r3, r3, #6
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	bf08      	it	eq
 8002f34:	1aad      	subeq	r5, r5, r2
 8002f36:	68a3      	ldr	r3, [r4, #8]
 8002f38:	6922      	ldr	r2, [r4, #16]
 8002f3a:	bf0c      	ite	eq
 8002f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f40:	2500      	movne	r5, #0
 8002f42:	4293      	cmp	r3, r2
 8002f44:	bfc4      	itt	gt
 8002f46:	1a9b      	subgt	r3, r3, r2
 8002f48:	18ed      	addgt	r5, r5, r3
 8002f4a:	f04f 0900 	mov.w	r9, #0
 8002f4e:	341a      	adds	r4, #26
 8002f50:	454d      	cmp	r5, r9
 8002f52:	d11a      	bne.n	8002f8a <_printf_common+0xd6>
 8002f54:	2000      	movs	r0, #0
 8002f56:	e008      	b.n	8002f6a <_printf_common+0xb6>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	4652      	mov	r2, sl
 8002f5c:	4639      	mov	r1, r7
 8002f5e:	4630      	mov	r0, r6
 8002f60:	47c0      	blx	r8
 8002f62:	3001      	adds	r0, #1
 8002f64:	d103      	bne.n	8002f6e <_printf_common+0xba>
 8002f66:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f6e:	3501      	adds	r5, #1
 8002f70:	e7c3      	b.n	8002efa <_printf_common+0x46>
 8002f72:	18e1      	adds	r1, r4, r3
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	2030      	movs	r0, #48	; 0x30
 8002f78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f7c:	4422      	add	r2, r4
 8002f7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f86:	3302      	adds	r3, #2
 8002f88:	e7c5      	b.n	8002f16 <_printf_common+0x62>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	4622      	mov	r2, r4
 8002f8e:	4639      	mov	r1, r7
 8002f90:	4630      	mov	r0, r6
 8002f92:	47c0      	blx	r8
 8002f94:	3001      	adds	r0, #1
 8002f96:	d0e6      	beq.n	8002f66 <_printf_common+0xb2>
 8002f98:	f109 0901 	add.w	r9, r9, #1
 8002f9c:	e7d8      	b.n	8002f50 <_printf_common+0x9c>
	...

08002fa0 <_printf_i>:
 8002fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fa4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002fa8:	460c      	mov	r4, r1
 8002faa:	7e09      	ldrb	r1, [r1, #24]
 8002fac:	b085      	sub	sp, #20
 8002fae:	296e      	cmp	r1, #110	; 0x6e
 8002fb0:	4617      	mov	r7, r2
 8002fb2:	4606      	mov	r6, r0
 8002fb4:	4698      	mov	r8, r3
 8002fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002fb8:	f000 80b3 	beq.w	8003122 <_printf_i+0x182>
 8002fbc:	d822      	bhi.n	8003004 <_printf_i+0x64>
 8002fbe:	2963      	cmp	r1, #99	; 0x63
 8002fc0:	d036      	beq.n	8003030 <_printf_i+0x90>
 8002fc2:	d80a      	bhi.n	8002fda <_printf_i+0x3a>
 8002fc4:	2900      	cmp	r1, #0
 8002fc6:	f000 80b9 	beq.w	800313c <_printf_i+0x19c>
 8002fca:	2958      	cmp	r1, #88	; 0x58
 8002fcc:	f000 8083 	beq.w	80030d6 <_printf_i+0x136>
 8002fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002fd8:	e032      	b.n	8003040 <_printf_i+0xa0>
 8002fda:	2964      	cmp	r1, #100	; 0x64
 8002fdc:	d001      	beq.n	8002fe2 <_printf_i+0x42>
 8002fde:	2969      	cmp	r1, #105	; 0x69
 8002fe0:	d1f6      	bne.n	8002fd0 <_printf_i+0x30>
 8002fe2:	6820      	ldr	r0, [r4, #0]
 8002fe4:	6813      	ldr	r3, [r2, #0]
 8002fe6:	0605      	lsls	r5, r0, #24
 8002fe8:	f103 0104 	add.w	r1, r3, #4
 8002fec:	d52a      	bpl.n	8003044 <_printf_i+0xa4>
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6011      	str	r1, [r2, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	da03      	bge.n	8002ffe <_printf_i+0x5e>
 8002ff6:	222d      	movs	r2, #45	; 0x2d
 8002ff8:	425b      	negs	r3, r3
 8002ffa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002ffe:	486f      	ldr	r0, [pc, #444]	; (80031bc <_printf_i+0x21c>)
 8003000:	220a      	movs	r2, #10
 8003002:	e039      	b.n	8003078 <_printf_i+0xd8>
 8003004:	2973      	cmp	r1, #115	; 0x73
 8003006:	f000 809d 	beq.w	8003144 <_printf_i+0x1a4>
 800300a:	d808      	bhi.n	800301e <_printf_i+0x7e>
 800300c:	296f      	cmp	r1, #111	; 0x6f
 800300e:	d020      	beq.n	8003052 <_printf_i+0xb2>
 8003010:	2970      	cmp	r1, #112	; 0x70
 8003012:	d1dd      	bne.n	8002fd0 <_printf_i+0x30>
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	f043 0320 	orr.w	r3, r3, #32
 800301a:	6023      	str	r3, [r4, #0]
 800301c:	e003      	b.n	8003026 <_printf_i+0x86>
 800301e:	2975      	cmp	r1, #117	; 0x75
 8003020:	d017      	beq.n	8003052 <_printf_i+0xb2>
 8003022:	2978      	cmp	r1, #120	; 0x78
 8003024:	d1d4      	bne.n	8002fd0 <_printf_i+0x30>
 8003026:	2378      	movs	r3, #120	; 0x78
 8003028:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800302c:	4864      	ldr	r0, [pc, #400]	; (80031c0 <_printf_i+0x220>)
 800302e:	e055      	b.n	80030dc <_printf_i+0x13c>
 8003030:	6813      	ldr	r3, [r2, #0]
 8003032:	1d19      	adds	r1, r3, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6011      	str	r1, [r2, #0]
 8003038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800303c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003040:	2301      	movs	r3, #1
 8003042:	e08c      	b.n	800315e <_printf_i+0x1be>
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6011      	str	r1, [r2, #0]
 8003048:	f010 0f40 	tst.w	r0, #64	; 0x40
 800304c:	bf18      	it	ne
 800304e:	b21b      	sxthne	r3, r3
 8003050:	e7cf      	b.n	8002ff2 <_printf_i+0x52>
 8003052:	6813      	ldr	r3, [r2, #0]
 8003054:	6825      	ldr	r5, [r4, #0]
 8003056:	1d18      	adds	r0, r3, #4
 8003058:	6010      	str	r0, [r2, #0]
 800305a:	0628      	lsls	r0, r5, #24
 800305c:	d501      	bpl.n	8003062 <_printf_i+0xc2>
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	e002      	b.n	8003068 <_printf_i+0xc8>
 8003062:	0668      	lsls	r0, r5, #25
 8003064:	d5fb      	bpl.n	800305e <_printf_i+0xbe>
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	4854      	ldr	r0, [pc, #336]	; (80031bc <_printf_i+0x21c>)
 800306a:	296f      	cmp	r1, #111	; 0x6f
 800306c:	bf14      	ite	ne
 800306e:	220a      	movne	r2, #10
 8003070:	2208      	moveq	r2, #8
 8003072:	2100      	movs	r1, #0
 8003074:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003078:	6865      	ldr	r5, [r4, #4]
 800307a:	60a5      	str	r5, [r4, #8]
 800307c:	2d00      	cmp	r5, #0
 800307e:	f2c0 8095 	blt.w	80031ac <_printf_i+0x20c>
 8003082:	6821      	ldr	r1, [r4, #0]
 8003084:	f021 0104 	bic.w	r1, r1, #4
 8003088:	6021      	str	r1, [r4, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d13d      	bne.n	800310a <_printf_i+0x16a>
 800308e:	2d00      	cmp	r5, #0
 8003090:	f040 808e 	bne.w	80031b0 <_printf_i+0x210>
 8003094:	4665      	mov	r5, ip
 8003096:	2a08      	cmp	r2, #8
 8003098:	d10b      	bne.n	80030b2 <_printf_i+0x112>
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	07db      	lsls	r3, r3, #31
 800309e:	d508      	bpl.n	80030b2 <_printf_i+0x112>
 80030a0:	6923      	ldr	r3, [r4, #16]
 80030a2:	6862      	ldr	r2, [r4, #4]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	bfde      	ittt	le
 80030a8:	2330      	movle	r3, #48	; 0x30
 80030aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030b2:	ebac 0305 	sub.w	r3, ip, r5
 80030b6:	6123      	str	r3, [r4, #16]
 80030b8:	f8cd 8000 	str.w	r8, [sp]
 80030bc:	463b      	mov	r3, r7
 80030be:	aa03      	add	r2, sp, #12
 80030c0:	4621      	mov	r1, r4
 80030c2:	4630      	mov	r0, r6
 80030c4:	f7ff fef6 	bl	8002eb4 <_printf_common>
 80030c8:	3001      	adds	r0, #1
 80030ca:	d14d      	bne.n	8003168 <_printf_i+0x1c8>
 80030cc:	f04f 30ff 	mov.w	r0, #4294967295
 80030d0:	b005      	add	sp, #20
 80030d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030d6:	4839      	ldr	r0, [pc, #228]	; (80031bc <_printf_i+0x21c>)
 80030d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80030dc:	6813      	ldr	r3, [r2, #0]
 80030de:	6821      	ldr	r1, [r4, #0]
 80030e0:	1d1d      	adds	r5, r3, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6015      	str	r5, [r2, #0]
 80030e6:	060a      	lsls	r2, r1, #24
 80030e8:	d50b      	bpl.n	8003102 <_printf_i+0x162>
 80030ea:	07ca      	lsls	r2, r1, #31
 80030ec:	bf44      	itt	mi
 80030ee:	f041 0120 	orrmi.w	r1, r1, #32
 80030f2:	6021      	strmi	r1, [r4, #0]
 80030f4:	b91b      	cbnz	r3, 80030fe <_printf_i+0x15e>
 80030f6:	6822      	ldr	r2, [r4, #0]
 80030f8:	f022 0220 	bic.w	r2, r2, #32
 80030fc:	6022      	str	r2, [r4, #0]
 80030fe:	2210      	movs	r2, #16
 8003100:	e7b7      	b.n	8003072 <_printf_i+0xd2>
 8003102:	064d      	lsls	r5, r1, #25
 8003104:	bf48      	it	mi
 8003106:	b29b      	uxthmi	r3, r3
 8003108:	e7ef      	b.n	80030ea <_printf_i+0x14a>
 800310a:	4665      	mov	r5, ip
 800310c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003110:	fb02 3311 	mls	r3, r2, r1, r3
 8003114:	5cc3      	ldrb	r3, [r0, r3]
 8003116:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800311a:	460b      	mov	r3, r1
 800311c:	2900      	cmp	r1, #0
 800311e:	d1f5      	bne.n	800310c <_printf_i+0x16c>
 8003120:	e7b9      	b.n	8003096 <_printf_i+0xf6>
 8003122:	6813      	ldr	r3, [r2, #0]
 8003124:	6825      	ldr	r5, [r4, #0]
 8003126:	6961      	ldr	r1, [r4, #20]
 8003128:	1d18      	adds	r0, r3, #4
 800312a:	6010      	str	r0, [r2, #0]
 800312c:	0628      	lsls	r0, r5, #24
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	d501      	bpl.n	8003136 <_printf_i+0x196>
 8003132:	6019      	str	r1, [r3, #0]
 8003134:	e002      	b.n	800313c <_printf_i+0x19c>
 8003136:	066a      	lsls	r2, r5, #25
 8003138:	d5fb      	bpl.n	8003132 <_printf_i+0x192>
 800313a:	8019      	strh	r1, [r3, #0]
 800313c:	2300      	movs	r3, #0
 800313e:	6123      	str	r3, [r4, #16]
 8003140:	4665      	mov	r5, ip
 8003142:	e7b9      	b.n	80030b8 <_printf_i+0x118>
 8003144:	6813      	ldr	r3, [r2, #0]
 8003146:	1d19      	adds	r1, r3, #4
 8003148:	6011      	str	r1, [r2, #0]
 800314a:	681d      	ldr	r5, [r3, #0]
 800314c:	6862      	ldr	r2, [r4, #4]
 800314e:	2100      	movs	r1, #0
 8003150:	4628      	mov	r0, r5
 8003152:	f7fd f875 	bl	8000240 <memchr>
 8003156:	b108      	cbz	r0, 800315c <_printf_i+0x1bc>
 8003158:	1b40      	subs	r0, r0, r5
 800315a:	6060      	str	r0, [r4, #4]
 800315c:	6863      	ldr	r3, [r4, #4]
 800315e:	6123      	str	r3, [r4, #16]
 8003160:	2300      	movs	r3, #0
 8003162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003166:	e7a7      	b.n	80030b8 <_printf_i+0x118>
 8003168:	6923      	ldr	r3, [r4, #16]
 800316a:	462a      	mov	r2, r5
 800316c:	4639      	mov	r1, r7
 800316e:	4630      	mov	r0, r6
 8003170:	47c0      	blx	r8
 8003172:	3001      	adds	r0, #1
 8003174:	d0aa      	beq.n	80030cc <_printf_i+0x12c>
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	079b      	lsls	r3, r3, #30
 800317a:	d413      	bmi.n	80031a4 <_printf_i+0x204>
 800317c:	68e0      	ldr	r0, [r4, #12]
 800317e:	9b03      	ldr	r3, [sp, #12]
 8003180:	4298      	cmp	r0, r3
 8003182:	bfb8      	it	lt
 8003184:	4618      	movlt	r0, r3
 8003186:	e7a3      	b.n	80030d0 <_printf_i+0x130>
 8003188:	2301      	movs	r3, #1
 800318a:	464a      	mov	r2, r9
 800318c:	4639      	mov	r1, r7
 800318e:	4630      	mov	r0, r6
 8003190:	47c0      	blx	r8
 8003192:	3001      	adds	r0, #1
 8003194:	d09a      	beq.n	80030cc <_printf_i+0x12c>
 8003196:	3501      	adds	r5, #1
 8003198:	68e3      	ldr	r3, [r4, #12]
 800319a:	9a03      	ldr	r2, [sp, #12]
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	42ab      	cmp	r3, r5
 80031a0:	dcf2      	bgt.n	8003188 <_printf_i+0x1e8>
 80031a2:	e7eb      	b.n	800317c <_printf_i+0x1dc>
 80031a4:	2500      	movs	r5, #0
 80031a6:	f104 0919 	add.w	r9, r4, #25
 80031aa:	e7f5      	b.n	8003198 <_printf_i+0x1f8>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ac      	bne.n	800310a <_printf_i+0x16a>
 80031b0:	7803      	ldrb	r3, [r0, #0]
 80031b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031ba:	e76c      	b.n	8003096 <_printf_i+0xf6>
 80031bc:	080035a9 	.word	0x080035a9
 80031c0:	080035ba 	.word	0x080035ba

080031c4 <_read_r>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	4c07      	ldr	r4, [pc, #28]	; (80031e4 <_read_r+0x20>)
 80031c8:	4605      	mov	r5, r0
 80031ca:	4608      	mov	r0, r1
 80031cc:	4611      	mov	r1, r2
 80031ce:	2200      	movs	r2, #0
 80031d0:	6022      	str	r2, [r4, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7fd fcda 	bl	8000b8c <_read>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d102      	bne.n	80031e2 <_read_r+0x1e>
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	b103      	cbz	r3, 80031e2 <_read_r+0x1e>
 80031e0:	602b      	str	r3, [r5, #0]
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	20000380 	.word	0x20000380

080031e8 <__srget_r>:
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	460c      	mov	r4, r1
 80031ec:	4605      	mov	r5, r0
 80031ee:	b118      	cbz	r0, 80031f8 <__srget_r+0x10>
 80031f0:	6983      	ldr	r3, [r0, #24]
 80031f2:	b90b      	cbnz	r3, 80031f8 <__srget_r+0x10>
 80031f4:	f7ff f93c 	bl	8002470 <__sinit>
 80031f8:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <__srget_r+0x4c>)
 80031fa:	429c      	cmp	r4, r3
 80031fc:	d10d      	bne.n	800321a <__srget_r+0x32>
 80031fe:	686c      	ldr	r4, [r5, #4]
 8003200:	4621      	mov	r1, r4
 8003202:	4628      	mov	r0, r5
 8003204:	f000 f848 	bl	8003298 <__srefill_r>
 8003208:	b988      	cbnz	r0, 800322e <__srget_r+0x46>
 800320a:	6863      	ldr	r3, [r4, #4]
 800320c:	3b01      	subs	r3, #1
 800320e:	6063      	str	r3, [r4, #4]
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	6022      	str	r2, [r4, #0]
 8003216:	7818      	ldrb	r0, [r3, #0]
 8003218:	bd38      	pop	{r3, r4, r5, pc}
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <__srget_r+0x50>)
 800321c:	429c      	cmp	r4, r3
 800321e:	d101      	bne.n	8003224 <__srget_r+0x3c>
 8003220:	68ac      	ldr	r4, [r5, #8]
 8003222:	e7ed      	b.n	8003200 <__srget_r+0x18>
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <__srget_r+0x54>)
 8003226:	429c      	cmp	r4, r3
 8003228:	bf08      	it	eq
 800322a:	68ec      	ldreq	r4, [r5, #12]
 800322c:	e7e8      	b.n	8003200 <__srget_r+0x18>
 800322e:	f04f 30ff 	mov.w	r0, #4294967295
 8003232:	e7f1      	b.n	8003218 <__srget_r+0x30>
 8003234:	08003554 	.word	0x08003554
 8003238:	08003574 	.word	0x08003574
 800323c:	08003534 	.word	0x08003534

08003240 <_fstat_r>:
 8003240:	b538      	push	{r3, r4, r5, lr}
 8003242:	4c07      	ldr	r4, [pc, #28]	; (8003260 <_fstat_r+0x20>)
 8003244:	2300      	movs	r3, #0
 8003246:	4605      	mov	r5, r0
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	6023      	str	r3, [r4, #0]
 800324e:	f000 f8b7 	bl	80033c0 <_fstat>
 8003252:	1c43      	adds	r3, r0, #1
 8003254:	d102      	bne.n	800325c <_fstat_r+0x1c>
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	b103      	cbz	r3, 800325c <_fstat_r+0x1c>
 800325a:	602b      	str	r3, [r5, #0]
 800325c:	bd38      	pop	{r3, r4, r5, pc}
 800325e:	bf00      	nop
 8003260:	20000380 	.word	0x20000380

08003264 <_isatty_r>:
 8003264:	b538      	push	{r3, r4, r5, lr}
 8003266:	4c06      	ldr	r4, [pc, #24]	; (8003280 <_isatty_r+0x1c>)
 8003268:	2300      	movs	r3, #0
 800326a:	4605      	mov	r5, r0
 800326c:	4608      	mov	r0, r1
 800326e:	6023      	str	r3, [r4, #0]
 8003270:	f000 f8ae 	bl	80033d0 <_isatty>
 8003274:	1c43      	adds	r3, r0, #1
 8003276:	d102      	bne.n	800327e <_isatty_r+0x1a>
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	b103      	cbz	r3, 800327e <_isatty_r+0x1a>
 800327c:	602b      	str	r3, [r5, #0]
 800327e:	bd38      	pop	{r3, r4, r5, pc}
 8003280:	20000380 	.word	0x20000380

08003284 <lflush>:
 8003284:	8983      	ldrh	r3, [r0, #12]
 8003286:	f003 0309 	and.w	r3, r3, #9
 800328a:	2b09      	cmp	r3, #9
 800328c:	d101      	bne.n	8003292 <lflush+0xe>
 800328e:	f7ff b89d 	b.w	80023cc <fflush>
 8003292:	2000      	movs	r0, #0
 8003294:	4770      	bx	lr
	...

08003298 <__srefill_r>:
 8003298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329a:	460c      	mov	r4, r1
 800329c:	4605      	mov	r5, r0
 800329e:	b118      	cbz	r0, 80032a8 <__srefill_r+0x10>
 80032a0:	6983      	ldr	r3, [r0, #24]
 80032a2:	b90b      	cbnz	r3, 80032a8 <__srefill_r+0x10>
 80032a4:	f7ff f8e4 	bl	8002470 <__sinit>
 80032a8:	4b3c      	ldr	r3, [pc, #240]	; (800339c <__srefill_r+0x104>)
 80032aa:	429c      	cmp	r4, r3
 80032ac:	d10a      	bne.n	80032c4 <__srefill_r+0x2c>
 80032ae:	686c      	ldr	r4, [r5, #4]
 80032b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032b4:	2300      	movs	r3, #0
 80032b6:	6063      	str	r3, [r4, #4]
 80032b8:	b293      	uxth	r3, r2
 80032ba:	069e      	lsls	r6, r3, #26
 80032bc:	d50c      	bpl.n	80032d8 <__srefill_r+0x40>
 80032be:	f04f 30ff 	mov.w	r0, #4294967295
 80032c2:	e067      	b.n	8003394 <__srefill_r+0xfc>
 80032c4:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <__srefill_r+0x108>)
 80032c6:	429c      	cmp	r4, r3
 80032c8:	d101      	bne.n	80032ce <__srefill_r+0x36>
 80032ca:	68ac      	ldr	r4, [r5, #8]
 80032cc:	e7f0      	b.n	80032b0 <__srefill_r+0x18>
 80032ce:	4b35      	ldr	r3, [pc, #212]	; (80033a4 <__srefill_r+0x10c>)
 80032d0:	429c      	cmp	r4, r3
 80032d2:	bf08      	it	eq
 80032d4:	68ec      	ldreq	r4, [r5, #12]
 80032d6:	e7eb      	b.n	80032b0 <__srefill_r+0x18>
 80032d8:	0758      	lsls	r0, r3, #29
 80032da:	d449      	bmi.n	8003370 <__srefill_r+0xd8>
 80032dc:	06d9      	lsls	r1, r3, #27
 80032de:	d405      	bmi.n	80032ec <__srefill_r+0x54>
 80032e0:	2309      	movs	r3, #9
 80032e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e6:	602b      	str	r3, [r5, #0]
 80032e8:	81a2      	strh	r2, [r4, #12]
 80032ea:	e7e8      	b.n	80032be <__srefill_r+0x26>
 80032ec:	071a      	lsls	r2, r3, #28
 80032ee:	d50b      	bpl.n	8003308 <__srefill_r+0x70>
 80032f0:	4621      	mov	r1, r4
 80032f2:	4628      	mov	r0, r5
 80032f4:	f7ff f840 	bl	8002378 <_fflush_r>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d1e0      	bne.n	80032be <__srefill_r+0x26>
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	60a0      	str	r0, [r4, #8]
 8003300:	f023 0308 	bic.w	r3, r3, #8
 8003304:	81a3      	strh	r3, [r4, #12]
 8003306:	61a0      	str	r0, [r4, #24]
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	f043 0304 	orr.w	r3, r3, #4
 800330e:	81a3      	strh	r3, [r4, #12]
 8003310:	6923      	ldr	r3, [r4, #16]
 8003312:	b91b      	cbnz	r3, 800331c <__srefill_r+0x84>
 8003314:	4621      	mov	r1, r4
 8003316:	4628      	mov	r0, r5
 8003318:	f7ff fc4a 	bl	8002bb0 <__smakebuf_r>
 800331c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003320:	b2be      	uxth	r6, r7
 8003322:	07b3      	lsls	r3, r6, #30
 8003324:	d00f      	beq.n	8003346 <__srefill_r+0xae>
 8003326:	2301      	movs	r3, #1
 8003328:	81a3      	strh	r3, [r4, #12]
 800332a:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <__srefill_r+0x110>)
 800332c:	491f      	ldr	r1, [pc, #124]	; (80033ac <__srefill_r+0x114>)
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	f006 0609 	and.w	r6, r6, #9
 8003334:	f7ff f908 	bl	8002548 <_fwalk>
 8003338:	2e09      	cmp	r6, #9
 800333a:	81a7      	strh	r7, [r4, #12]
 800333c:	d103      	bne.n	8003346 <__srefill_r+0xae>
 800333e:	4621      	mov	r1, r4
 8003340:	4628      	mov	r0, r5
 8003342:	f7fe ff93 	bl	800226c <__sflush_r>
 8003346:	6922      	ldr	r2, [r4, #16]
 8003348:	6022      	str	r2, [r4, #0]
 800334a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800334c:	6963      	ldr	r3, [r4, #20]
 800334e:	6a21      	ldr	r1, [r4, #32]
 8003350:	4628      	mov	r0, r5
 8003352:	47b0      	blx	r6
 8003354:	2800      	cmp	r0, #0
 8003356:	6060      	str	r0, [r4, #4]
 8003358:	dc1d      	bgt.n	8003396 <__srefill_r+0xfe>
 800335a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800335e:	bf17      	itett	ne
 8003360:	2200      	movne	r2, #0
 8003362:	f043 0320 	orreq.w	r3, r3, #32
 8003366:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800336a:	6062      	strne	r2, [r4, #4]
 800336c:	81a3      	strh	r3, [r4, #12]
 800336e:	e7a6      	b.n	80032be <__srefill_r+0x26>
 8003370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003372:	2900      	cmp	r1, #0
 8003374:	d0cc      	beq.n	8003310 <__srefill_r+0x78>
 8003376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800337a:	4299      	cmp	r1, r3
 800337c:	d002      	beq.n	8003384 <__srefill_r+0xec>
 800337e:	4628      	mov	r0, r5
 8003380:	f7ff f95a 	bl	8002638 <_free_r>
 8003384:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003386:	6063      	str	r3, [r4, #4]
 8003388:	2000      	movs	r0, #0
 800338a:	6360      	str	r0, [r4, #52]	; 0x34
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0bf      	beq.n	8003310 <__srefill_r+0x78>
 8003390:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003392:	6023      	str	r3, [r4, #0]
 8003394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003396:	2000      	movs	r0, #0
 8003398:	e7fc      	b.n	8003394 <__srefill_r+0xfc>
 800339a:	bf00      	nop
 800339c:	08003554 	.word	0x08003554
 80033a0:	08003574 	.word	0x08003574
 80033a4:	08003534 	.word	0x08003534
 80033a8:	08003594 	.word	0x08003594
 80033ac:	08003285 	.word	0x08003285

080033b0 <_close>:
 80033b0:	4b02      	ldr	r3, [pc, #8]	; (80033bc <_close+0xc>)
 80033b2:	2258      	movs	r2, #88	; 0x58
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	f04f 30ff 	mov.w	r0, #4294967295
 80033ba:	4770      	bx	lr
 80033bc:	20000380 	.word	0x20000380

080033c0 <_fstat>:
 80033c0:	4b02      	ldr	r3, [pc, #8]	; (80033cc <_fstat+0xc>)
 80033c2:	2258      	movs	r2, #88	; 0x58
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f04f 30ff 	mov.w	r0, #4294967295
 80033ca:	4770      	bx	lr
 80033cc:	20000380 	.word	0x20000380

080033d0 <_isatty>:
 80033d0:	4b02      	ldr	r3, [pc, #8]	; (80033dc <_isatty+0xc>)
 80033d2:	2258      	movs	r2, #88	; 0x58
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	2000      	movs	r0, #0
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000380 	.word	0x20000380

080033e0 <_lseek>:
 80033e0:	4b02      	ldr	r3, [pc, #8]	; (80033ec <_lseek+0xc>)
 80033e2:	2258      	movs	r2, #88	; 0x58
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	f04f 30ff 	mov.w	r0, #4294967295
 80033ea:	4770      	bx	lr
 80033ec:	20000380 	.word	0x20000380

080033f0 <_sbrk>:
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <_sbrk+0x14>)
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	4602      	mov	r2, r0
 80033f6:	b909      	cbnz	r1, 80033fc <_sbrk+0xc>
 80033f8:	4903      	ldr	r1, [pc, #12]	; (8003408 <_sbrk+0x18>)
 80033fa:	6019      	str	r1, [r3, #0]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	4402      	add	r2, r0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	4770      	bx	lr
 8003404:	20000094 	.word	0x20000094
 8003408:	20000388 	.word	0x20000388

0800340c <_init>:
 800340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340e:	bf00      	nop
 8003410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003412:	bc08      	pop	{r3}
 8003414:	469e      	mov	lr, r3
 8003416:	4770      	bx	lr

08003418 <_fini>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	bf00      	nop
 800341c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341e:	bc08      	pop	{r3}
 8003420:	469e      	mov	lr, r3
 8003422:	4770      	bx	lr
